{
  "version": 3,
  "sources": ["../../src/svg/index.js"],
  "sourcesContent": ["/**\n * External dependencies\n */\nimport clsx from 'clsx';\n\n/**\n * WordPress dependencies\n */\nimport { createElement, forwardRef } from '@wordpress/element';\n\n/** @typedef {{isPressed?: boolean} & import('react').ComponentPropsWithoutRef<'svg'>} SVGProps */\n\n/**\n * @param {import('react').ComponentPropsWithoutRef<'circle'>} props\n *\n * @return {JSX.Element} Circle component\n */\nexport const Circle = ( props ) => createElement( 'circle', props );\n\n/**\n * @param {import('react').ComponentPropsWithoutRef<'g'>} props\n *\n * @return {JSX.Element} G component\n */\nexport const G = ( props ) => createElement( 'g', props );\n\n/**\n * @param {import('react').ComponentPropsWithoutRef<'line'>} props\n *\n * @return {JSX.Element} Path component\n */\nexport const Line = ( props ) => createElement( 'line', props );\n\n/**\n * @param {import('react').ComponentPropsWithoutRef<'path'>} props\n *\n * @return {JSX.Element} Path component\n */\nexport const Path = ( props ) => createElement( 'path', props );\n\n/**\n * @param {import('react').ComponentPropsWithoutRef<'polygon'>} props\n *\n * @return {JSX.Element} Polygon component\n */\nexport const Polygon = ( props ) => createElement( 'polygon', props );\n\n/**\n * @param {import('react').ComponentPropsWithoutRef<'rect'>} props\n *\n * @return {JSX.Element} Rect component\n */\nexport const Rect = ( props ) => createElement( 'rect', props );\n\n/**\n * @param {import('react').ComponentPropsWithoutRef<'defs'>} props\n *\n * @return {JSX.Element} Defs component\n */\nexport const Defs = ( props ) => createElement( 'defs', props );\n\n/**\n * @param {import('react').ComponentPropsWithoutRef<'radialGradient'>} props\n *\n * @return {JSX.Element} RadialGradient component\n */\nexport const RadialGradient = ( props ) =>\n\tcreateElement( 'radialGradient', props );\n\n/**\n * @param {import('react').ComponentPropsWithoutRef<'linearGradient'>} props\n *\n * @return {JSX.Element} LinearGradient component\n */\nexport const LinearGradient = ( props ) =>\n\tcreateElement( 'linearGradient', props );\n\n/**\n * @param {import('react').ComponentPropsWithoutRef<'stop'>} props\n *\n * @return {JSX.Element} Stop component\n */\nexport const Stop = ( props ) => createElement( 'stop', props );\n\nexport const SVG = forwardRef(\n\t/**\n\t * @param {SVGProps}                                    props isPressed indicates whether the SVG should appear as pressed.\n\t *                                                            Other props will be passed through to svg component.\n\t * @param {import('react').ForwardedRef<SVGSVGElement>} ref   The forwarded ref to the SVG element.\n\t *\n\t * @return {JSX.Element} Stop component\n\t */\n\t( { className, isPressed, ...props }, ref ) => {\n\t\tconst appliedProps = {\n\t\t\t...props,\n\t\t\tclassName:\n\t\t\t\tclsx( className, { 'is-pressed': isPressed } ) || undefined,\n\t\t\t'aria-hidden': true,\n\t\t\tfocusable: false,\n\t\t};\n\n\t\t// Disable reason: We need to have a way to render HTML tag for web.\n\t\t// eslint-disable-next-line react/forbid-elements\n\t\treturn <svg { ...appliedProps } ref={ ref } />;\n\t}\n);\nSVG.displayName = 'SVG';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuGS;AApGT,kBAAiB;AAKjB,qBAA0C;AASnC,MAAM,SAAS,CAAE,cAAW,8BAAe,UAAU,KAAM;AAO3D,MAAM,IAAI,CAAE,cAAW,8BAAe,KAAK,KAAM;AAOjD,MAAM,OAAO,CAAE,cAAW,8BAAe,QAAQ,KAAM;AAOvD,MAAM,OAAO,CAAE,cAAW,8BAAe,QAAQ,KAAM;AAOvD,MAAM,UAAU,CAAE,cAAW,8BAAe,WAAW,KAAM;AAO7D,MAAM,OAAO,CAAE,cAAW,8BAAe,QAAQ,KAAM;AAOvD,MAAM,OAAO,CAAE,cAAW,8BAAe,QAAQ,KAAM;AAOvD,MAAM,iBAAiB,CAAE,cAC/B,8BAAe,kBAAkB,KAAM;AAOjC,MAAM,iBAAiB,CAAE,cAC/B,8BAAe,kBAAkB,KAAM;AAOjC,MAAM,OAAO,CAAE,cAAW,8BAAe,QAAQ,KAAM;AAEvD,MAAM,UAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQlB,CAAE,EAAE,WAAW,WAAW,GAAG,MAAM,GAAG,QAAS;AAC9C,UAAM,eAAe;AAAA,MACpB,GAAG;AAAA,MACH,eACC,YAAAA,SAAM,WAAW,EAAE,cAAc,UAAU,CAAE,KAAK;AAAA,MACnD,eAAe;AAAA,MACf,WAAW;AAAA,IACZ;AAIA,WAAO,4CAAC,SAAM,GAAG,cAAe,KAAY;AAAA,EAC7C;AACD;AACA,IAAI,cAAc;",
  "names": ["clsx"]
}
