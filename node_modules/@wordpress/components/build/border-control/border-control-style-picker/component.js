"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var component_exports = {};
__export(component_exports, {
  default: () => component_default
});
module.exports = __toCommonJS(component_exports);
var import_icons = require("@wordpress/icons");
var import_i18n = require("@wordpress/i18n");
var import_context = require("../../context");
var import_toggle_group_control = require("../../toggle-group-control");
var import_jsx_runtime = require("react/jsx-runtime");
const BORDER_STYLES = [{
  label: (0, import_i18n.__)("Solid"),
  icon: import_icons.lineSolid,
  value: "solid"
}, {
  label: (0, import_i18n.__)("Dashed"),
  icon: import_icons.lineDashed,
  value: "dashed"
}, {
  label: (0, import_i18n.__)("Dotted"),
  icon: import_icons.lineDotted,
  value: "dotted"
}];
function UnconnectedBorderControlStylePicker({
  onChange,
  ...restProps
}, forwardedRef) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_toggle_group_control.ToggleGroupControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    ref: forwardedRef,
    isDeselectable: true,
    onChange: (value) => {
      onChange?.(value);
    },
    ...restProps,
    children: BORDER_STYLES.map((borderStyle) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_toggle_group_control.ToggleGroupControlOptionIcon, {
      value: borderStyle.value,
      icon: borderStyle.icon,
      label: borderStyle.label
    }, borderStyle.value))
  });
}
const BorderControlStylePicker = (0, import_context.contextConnect)(UnconnectedBorderControlStylePicker, "BorderControlStylePicker");
var component_default = BorderControlStylePicker;
//# sourceMappingURL=component.js.map
