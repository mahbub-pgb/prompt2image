{
  "version": 3,
  "sources": ["../../../src/tools-panel/tools-panel/component.tsx"],
  "sourcesContent": ["/**\n * External dependencies\n */\n\n/**\n * Internal dependencies\n */\nimport ToolsPanelHeader from '../tools-panel-header';\nimport { ToolsPanelContext } from '../context';\nimport { useToolsPanel } from './hook';\nimport { Grid } from '../../grid';\nimport { contextConnect } from '../../context';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst UnconnectedToolsPanel = (props, forwardedRef) => {\n  const {\n    children,\n    label,\n    panelContext,\n    resetAllItems,\n    toggleItem,\n    headingLevel,\n    dropdownMenuProps,\n    ...toolsPanelProps\n  } = useToolsPanel(props);\n  return /*#__PURE__*/_jsx(Grid, {\n    ...toolsPanelProps,\n    columns: 2,\n    ref: forwardedRef,\n    children: /*#__PURE__*/_jsxs(ToolsPanelContext.Provider, {\n      value: panelContext,\n      children: [/*#__PURE__*/_jsx(ToolsPanelHeader, {\n        label: label,\n        resetAll: resetAllItems,\n        toggleItem: toggleItem,\n        headingLevel: headingLevel,\n        dropdownMenuProps: dropdownMenuProps\n      }), children]\n    })\n  });\n};\n\n/**\n * The `ToolsPanel` is a container component that displays its children preceded\n * by a header. The header includes a dropdown menu which is automatically\n * generated from the panel's inner `ToolsPanelItems`.\n *\n * ```jsx\n * import { __ } from '@wordpress/i18n';\n * import {\n *   __experimentalToolsPanel as ToolsPanel,\n *   __experimentalToolsPanelItem as ToolsPanelItem,\n *   __experimentalUnitControl as UnitControl\n * } from '@wordpress/components';\n *\n * function Example() {\n *   const [ height, setHeight ] = useState();\n *   const [ width, setWidth ] = useState();\n *\n *   const resetAll = () => {\n *     setHeight();\n *     setWidth();\n *   }\n *\n *   return (\n *     <ToolsPanel label={ __( 'Dimensions' ) } resetAll={ resetAll }>\n *       <ToolsPanelItem\n *         hasValue={ () => !! height }\n *         label={ __( 'Height' ) }\n *         onDeselect={ () => setHeight() }\n *       >\n *         <UnitControl\n *           __next40pxDefaultSize\n *           label={ __( 'Height' ) }\n *           onChange={ setHeight }\n *           value={ height }\n *         />\n *       </ToolsPanelItem>\n *       <ToolsPanelItem\n *         hasValue={ () => !! width }\n *         label={ __( 'Width' ) }\n *         onDeselect={ () => setWidth() }\n *       >\n *         <UnitControl\n *           __next40pxDefaultSize\n *           label={ __( 'Width' ) }\n *           onChange={ setWidth }\n *           value={ width }\n *         />\n *       </ToolsPanelItem>\n *     </ToolsPanel>\n *   );\n * }\n * ```\n */\nexport const ToolsPanel = contextConnect(UnconnectedToolsPanel, 'ToolsPanel');\nexport default ToolsPanel;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,gCAA6B;AAC7B,qBAAkC;AAClC,kBAA8B;AAC9B,kBAAqB;AACrB,IAAAA,kBAA+B;AAC/B,yBAA2C;AAC3C,MAAM,wBAAwB,CAAC,OAAO,iBAAiB;AACrD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,QAAI,2BAAc,KAAK;AACvB,SAAoB,uCAAAC,KAAK,kBAAM;AAAA,IAC7B,GAAG;AAAA,IACH,SAAS;AAAA,IACT,KAAK;AAAA,IACL,UAAuB,uCAAAC,MAAM,iCAAkB,UAAU;AAAA,MACvD,OAAO;AAAA,MACP,UAAU,CAAc,uCAAAD,KAAK,0BAAAE,SAAkB;AAAA,QAC7C;AAAA,QACA,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC,GAAG,QAAQ;AAAA,IACd,CAAC;AAAA,EACH,CAAC;AACH;AAuDO,MAAM,iBAAa,gCAAe,uBAAuB,YAAY;AAC5E,IAAO,oBAAQ;",
  "names": ["import_context", "_jsx", "_jsxs", "ToolsPanelHeader"]
}
