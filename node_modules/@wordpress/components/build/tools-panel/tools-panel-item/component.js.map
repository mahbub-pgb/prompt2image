{
  "version": 3,
  "sources": ["../../../src/tools-panel/tools-panel-item/component.tsx"],
  "sourcesContent": ["/**\n * External dependencies\n */\n\n/**\n * Internal dependencies\n */\nimport { useToolsPanelItem } from './hook';\nimport { View } from '../../view';\nimport { contextConnect } from '../../context';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// This wraps controls to be conditionally displayed within a tools panel. It\n// prevents props being applied to HTML elements that would make them invalid.\nconst UnconnectedToolsPanelItem = (props, forwardedRef) => {\n  const {\n    children,\n    isShown,\n    shouldRenderPlaceholder,\n    ...toolsPanelItemProps\n  } = useToolsPanelItem(props);\n  if (!isShown) {\n    return shouldRenderPlaceholder ? /*#__PURE__*/_jsx(View, {\n      ...toolsPanelItemProps,\n      ref: forwardedRef\n    }) : null;\n  }\n  return /*#__PURE__*/_jsx(View, {\n    ...toolsPanelItemProps,\n    ref: forwardedRef,\n    children: children\n  });\n};\nexport const ToolsPanelItem = contextConnect(UnconnectedToolsPanelItem, 'ToolsPanelItem');\nexport default ToolsPanelItem;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,kBAAkC;AAClC,kBAAqB;AACrB,qBAA+B;AAC/B,yBAA4B;AAG5B,MAAM,4BAA4B,CAAC,OAAO,iBAAiB;AACzD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,QAAI,+BAAkB,KAAK;AAC3B,MAAI,CAAC,SAAS;AACZ,WAAO,0BAAuC,uCAAAA,KAAK,kBAAM;AAAA,MACvD,GAAG;AAAA,MACH,KAAK;AAAA,IACP,CAAC,IAAI;AAAA,EACP;AACA,SAAoB,uCAAAA,KAAK,kBAAM;AAAA,IAC7B,GAAG;AAAA,IACH,KAAK;AAAA,IACL;AAAA,EACF,CAAC;AACH;AACO,MAAM,qBAAiB,+BAAe,2BAA2B,gBAAgB;AACxF,IAAO,oBAAQ;",
  "names": ["_jsx"]
}
