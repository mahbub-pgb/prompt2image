{
  "version": 3,
  "sources": ["../../src/utils/unit-values.ts"],
  "sourcesContent": ["const UNITED_VALUE_REGEX = /^([\\d.\\-+]*)\\s*(fr|cm|mm|Q|in|pc|pt|px|em|ex|ch|rem|lh|vw|vh|vmin|vmax|%|cap|ic|rlh|vi|vb|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx|svw|lvw|dvw|svh|lvh|dvh|svi|lvi|dvi|svb|lvb|dvb|svmin|lvmin|dvmin|svmax|lvmax|dvmax)?$/;\n\n/**\n * Parses a number and unit from a value.\n *\n * @param toParse Value to parse\n *\n * @return  The extracted number and unit.\n */\nexport function parseCSSUnitValue(toParse) {\n  const value = toParse.trim();\n  const matched = value.match(UNITED_VALUE_REGEX);\n  if (!matched) {\n    return [undefined, undefined];\n  }\n  const [, num, unit] = matched;\n  let numParsed = parseFloat(num);\n  numParsed = Number.isNaN(numParsed) ? undefined : numParsed;\n  return [numParsed, unit];\n}\n\n/**\n * Combines a value and a unit into a unit value.\n *\n * @param value\n * @param unit\n *\n * @return The unit value.\n */\nexport function createCSSUnitValue(value, unit) {\n  return `${value}${unit}`;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAM,qBAAqB;AASpB,SAAS,kBAAkB,SAAS;AACzC,QAAM,QAAQ,QAAQ,KAAK;AAC3B,QAAM,UAAU,MAAM,MAAM,kBAAkB;AAC9C,MAAI,CAAC,SAAS;AACZ,WAAO,CAAC,QAAW,MAAS;AAAA,EAC9B;AACA,QAAM,CAAC,EAAE,KAAK,IAAI,IAAI;AACtB,MAAI,YAAY,WAAW,GAAG;AAC9B,cAAY,OAAO,MAAM,SAAS,IAAI,SAAY;AAClD,SAAO,CAAC,WAAW,IAAI;AACzB;AAUO,SAAS,mBAAmB,OAAO,MAAM;AAC9C,SAAO,GAAG,KAAK,GAAG,IAAI;AACxB;",
  "names": []
}
