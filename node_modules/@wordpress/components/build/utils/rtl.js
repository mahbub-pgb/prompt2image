"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rtl_exports = {};
__export(rtl_exports, {
  convertLTRToRTL: () => convertLTRToRTL,
  rtl: () => rtl
});
module.exports = __toCommonJS(rtl_exports);
var import_react = require("@emotion/react");
var import_i18n = require("@wordpress/i18n");
const LOWER_LEFT_REGEXP = new RegExp(/-left/g);
const LOWER_RIGHT_REGEXP = new RegExp(/-right/g);
const UPPER_LEFT_REGEXP = new RegExp(/Left/g);
const UPPER_RIGHT_REGEXP = new RegExp(/Right/g);
function getConvertedKey(key) {
  if (key === "left") {
    return "right";
  }
  if (key === "right") {
    return "left";
  }
  if (LOWER_LEFT_REGEXP.test(key)) {
    return key.replace(LOWER_LEFT_REGEXP, "-right");
  }
  if (LOWER_RIGHT_REGEXP.test(key)) {
    return key.replace(LOWER_RIGHT_REGEXP, "-left");
  }
  if (UPPER_LEFT_REGEXP.test(key)) {
    return key.replace(UPPER_LEFT_REGEXP, "Right");
  }
  if (UPPER_RIGHT_REGEXP.test(key)) {
    return key.replace(UPPER_RIGHT_REGEXP, "Left");
  }
  return key;
}
const convertLTRToRTL = (ltrStyles = {}) => {
  return Object.fromEntries(Object.entries(ltrStyles).map(([key, value]) => [getConvertedKey(key), value]));
};
function rtl(ltrStyles = {}, rtlStyles) {
  return () => {
    if (rtlStyles) {
      return (0, import_i18n.isRTL)() ? /* @__PURE__ */ (0, import_react.css)(rtlStyles, process.env.NODE_ENV === "production" ? "" : ";label:rtl;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ0bC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4RW9CIiwiZmlsZSI6InJ0bC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGlzUlRMIH0gZnJvbSAnQHdvcmRwcmVzcy9pMThuJztcblxuY29uc3QgTE9XRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLWxlZnQvZyApO1xuY29uc3QgTE9XRVJfUklHSFRfUkVHRVhQID0gbmV3IFJlZ0V4cCggLy1yaWdodC9nICk7XG5jb25zdCBVUFBFUl9MRUZUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9MZWZ0L2cgKTtcbmNvbnN0IFVQUEVSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9SaWdodC9nICk7XG5cbi8qKlxuICogRmxpcHMgYSBDU1MgcHJvcGVydHkgZnJvbSBsZWZ0IDwtPiByaWdodC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBDU1MgcHJvcGVydHkgbmFtZS5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmbGlwcGVkIENTUyBwcm9wZXJ0eSBuYW1lLCBpZiBhcHBsaWNhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRDb252ZXJ0ZWRLZXkoIGtleSApIHtcblx0aWYgKCBrZXkgPT09ICdsZWZ0JyApIHtcblx0XHRyZXR1cm4gJ3JpZ2h0Jztcblx0fVxuXG5cdGlmICgga2V5ID09PSAncmlnaHQnICkge1xuXHRcdHJldHVybiAnbGVmdCc7XG5cdH1cblxuXHRpZiAoIExPV0VSX0xFRlRfUkVHRVhQLnRlc3QoIGtleSApICkge1xuXHRcdHJldHVybiBrZXkucmVwbGFjZSggTE9XRVJfTEVGVF9SRUdFWFAsICctcmlnaHQnICk7XG5cdH1cblxuXHRpZiAoIExPV0VSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIExPV0VSX1JJR0hUX1JFR0VYUCwgJy1sZWZ0JyApO1xuXHR9XG5cblx0aWYgKCBVUFBFUl9MRUZUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX0xFRlRfUkVHRVhQLCAnUmlnaHQnICk7XG5cdH1cblxuXHRpZiAoIFVQUEVSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX1JJR0hUX1JFR0VYUCwgJ0xlZnQnICk7XG5cdH1cblxuXHRyZXR1cm4ga2V5O1xufVxuXG4vKipcbiAqIEFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBjb252ZXJ0ZXIgZm9yIHN0eWxlIHByb3BlcnRpZXNcbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXNcbiAqXG4gKiBAcmV0dXJuIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gQ29udmVydGVkIGx0ciAtPiBydGwgc3R5bGVzXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0TFRSVG9SVEwgPSAoIGx0clN0eWxlcyA9IHt9ICkgPT4ge1xuXHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxuXHRcdE9iamVjdC5lbnRyaWVzKCBsdHJTdHlsZXMgKS5tYXAoICggWyBrZXksIHZhbHVlIF0gKSA9PiBbXG5cdFx0XHRnZXRDb252ZXJ0ZWRLZXkoIGtleSApLFxuXHRcdFx0dmFsdWUsXG5cdFx0XSApXG5cdCk7XG59O1xuXG4vKipcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlIGFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBzdHlsZSBjb252ZXJ0ZXIgZm9yIENTUyBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IGx0clN0eWxlcyAgIEx0ciBzdHlsZXMuIENvbnZlcnRzIGFuZCByZW5kZXJzIGZyb20gbHRyIC0+IHJ0bCBzdHlsZXMsIGlmIGFwcGxpY2FibGUuXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBbcnRsU3R5bGVzXSBSdGwgc3R5bGVzLiBSZW5kZXJzIGlmIHByb3ZpZGVkLlxuICpcbiAqIEByZXR1cm4geygpID0+IGltcG9ydCgnQGVtb3Rpb24vcmVhY3QnKS5TZXJpYWxpemVkU3R5bGVzfSBBIGZ1bmN0aW9uIHRvIG91dHB1dCBDU1Mgc3R5bGVzIGZvciBFbW90aW9uJ3MgcmVuZGVyZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ0bCggbHRyU3R5bGVzID0ge30sIHJ0bFN0eWxlcyApIHtcblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoIHJ0bFN0eWxlcyApIHtcblx0XHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3Ncblx0XHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBydGxTdHlsZXMgKSA6IGNzcyggbHRyU3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQHRzLWlnbm9yZTogYGNzc2AgdHlwZXMgYXJlIHdyb25nLCBpdCBjYW4gYWNjZXB0IGFuIG9iamVjdDogaHR0cHM6Ly9lbW90aW9uLnNoL2RvY3Mvb2JqZWN0LXN0eWxlcyN3aXRoLWNzc1xuXHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBjb252ZXJ0TFRSVG9SVEwoIGx0clN0eWxlcyApICkgOiBjc3MoIGx0clN0eWxlcyApO1xuXHR9O1xufVxuXG4vKipcbiAqIENhbGwgdGhpcyBpbiB0aGUgYHVzZU1lbW9gIGRlcGVuZGVuY3kgYXJyYXkgdG8gZW5zdXJlIHRoYXQgc3Vic2VxdWVudCByZW5kZXJzIHdpbGxcbiAqIGNhdXNlIHJ0bCBzdHlsZXMgdG8gdXBkYXRlIGJhc2VkIG9uIHRoZSBgaXNSVExgIHJldHVybiB2YWx1ZSBldmVuIGlmIGFsbCBvdGhlciBkZXBlbmRlbmNpZXNcbiAqIHJlbWFpbiB0aGUgc2FtZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgc3R5bGVzID0gdXNlTWVtbyggKCkgPT4ge1xuICogICByZXR1cm4gY3NzYFxuICogICAgICR7IHJ0bCggeyBtYXJnaW5SaWdodDogJzEwcHgnIH0gKSB9XG4gKiAgIGA7XG4gKiB9LCBbIHJ0bC53YXRjaCgpIF0gKTtcbiAqL1xucnRsLndhdGNoID0gKCkgPT4gaXNSVEwoKTtcbiJdfQ== */") : /* @__PURE__ */ (0, import_react.css)(ltrStyles, process.env.NODE_ENV === "production" ? "" : ";label:rtl;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ0bC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4RXVDIiwiZmlsZSI6InJ0bC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGlzUlRMIH0gZnJvbSAnQHdvcmRwcmVzcy9pMThuJztcblxuY29uc3QgTE9XRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLWxlZnQvZyApO1xuY29uc3QgTE9XRVJfUklHSFRfUkVHRVhQID0gbmV3IFJlZ0V4cCggLy1yaWdodC9nICk7XG5jb25zdCBVUFBFUl9MRUZUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9MZWZ0L2cgKTtcbmNvbnN0IFVQUEVSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9SaWdodC9nICk7XG5cbi8qKlxuICogRmxpcHMgYSBDU1MgcHJvcGVydHkgZnJvbSBsZWZ0IDwtPiByaWdodC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBDU1MgcHJvcGVydHkgbmFtZS5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmbGlwcGVkIENTUyBwcm9wZXJ0eSBuYW1lLCBpZiBhcHBsaWNhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRDb252ZXJ0ZWRLZXkoIGtleSApIHtcblx0aWYgKCBrZXkgPT09ICdsZWZ0JyApIHtcblx0XHRyZXR1cm4gJ3JpZ2h0Jztcblx0fVxuXG5cdGlmICgga2V5ID09PSAncmlnaHQnICkge1xuXHRcdHJldHVybiAnbGVmdCc7XG5cdH1cblxuXHRpZiAoIExPV0VSX0xFRlRfUkVHRVhQLnRlc3QoIGtleSApICkge1xuXHRcdHJldHVybiBrZXkucmVwbGFjZSggTE9XRVJfTEVGVF9SRUdFWFAsICctcmlnaHQnICk7XG5cdH1cblxuXHRpZiAoIExPV0VSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIExPV0VSX1JJR0hUX1JFR0VYUCwgJy1sZWZ0JyApO1xuXHR9XG5cblx0aWYgKCBVUFBFUl9MRUZUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX0xFRlRfUkVHRVhQLCAnUmlnaHQnICk7XG5cdH1cblxuXHRpZiAoIFVQUEVSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX1JJR0hUX1JFR0VYUCwgJ0xlZnQnICk7XG5cdH1cblxuXHRyZXR1cm4ga2V5O1xufVxuXG4vKipcbiAqIEFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBjb252ZXJ0ZXIgZm9yIHN0eWxlIHByb3BlcnRpZXNcbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXNcbiAqXG4gKiBAcmV0dXJuIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gQ29udmVydGVkIGx0ciAtPiBydGwgc3R5bGVzXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0TFRSVG9SVEwgPSAoIGx0clN0eWxlcyA9IHt9ICkgPT4ge1xuXHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxuXHRcdE9iamVjdC5lbnRyaWVzKCBsdHJTdHlsZXMgKS5tYXAoICggWyBrZXksIHZhbHVlIF0gKSA9PiBbXG5cdFx0XHRnZXRDb252ZXJ0ZWRLZXkoIGtleSApLFxuXHRcdFx0dmFsdWUsXG5cdFx0XSApXG5cdCk7XG59O1xuXG4vKipcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlIGFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBzdHlsZSBjb252ZXJ0ZXIgZm9yIENTUyBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IGx0clN0eWxlcyAgIEx0ciBzdHlsZXMuIENvbnZlcnRzIGFuZCByZW5kZXJzIGZyb20gbHRyIC0+IHJ0bCBzdHlsZXMsIGlmIGFwcGxpY2FibGUuXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBbcnRsU3R5bGVzXSBSdGwgc3R5bGVzLiBSZW5kZXJzIGlmIHByb3ZpZGVkLlxuICpcbiAqIEByZXR1cm4geygpID0+IGltcG9ydCgnQGVtb3Rpb24vcmVhY3QnKS5TZXJpYWxpemVkU3R5bGVzfSBBIGZ1bmN0aW9uIHRvIG91dHB1dCBDU1Mgc3R5bGVzIGZvciBFbW90aW9uJ3MgcmVuZGVyZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ0bCggbHRyU3R5bGVzID0ge30sIHJ0bFN0eWxlcyApIHtcblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoIHJ0bFN0eWxlcyApIHtcblx0XHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3Ncblx0XHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBydGxTdHlsZXMgKSA6IGNzcyggbHRyU3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQHRzLWlnbm9yZTogYGNzc2AgdHlwZXMgYXJlIHdyb25nLCBpdCBjYW4gYWNjZXB0IGFuIG9iamVjdDogaHR0cHM6Ly9lbW90aW9uLnNoL2RvY3Mvb2JqZWN0LXN0eWxlcyN3aXRoLWNzc1xuXHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBjb252ZXJ0TFRSVG9SVEwoIGx0clN0eWxlcyApICkgOiBjc3MoIGx0clN0eWxlcyApO1xuXHR9O1xufVxuXG4vKipcbiAqIENhbGwgdGhpcyBpbiB0aGUgYHVzZU1lbW9gIGRlcGVuZGVuY3kgYXJyYXkgdG8gZW5zdXJlIHRoYXQgc3Vic2VxdWVudCByZW5kZXJzIHdpbGxcbiAqIGNhdXNlIHJ0bCBzdHlsZXMgdG8gdXBkYXRlIGJhc2VkIG9uIHRoZSBgaXNSVExgIHJldHVybiB2YWx1ZSBldmVuIGlmIGFsbCBvdGhlciBkZXBlbmRlbmNpZXNcbiAqIHJlbWFpbiB0aGUgc2FtZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgc3R5bGVzID0gdXNlTWVtbyggKCkgPT4ge1xuICogICByZXR1cm4gY3NzYFxuICogICAgICR7IHJ0bCggeyBtYXJnaW5SaWdodDogJzEwcHgnIH0gKSB9XG4gKiAgIGA7XG4gKiB9LCBbIHJ0bC53YXRjaCgpIF0gKTtcbiAqL1xucnRsLndhdGNoID0gKCkgPT4gaXNSVEwoKTtcbiJdfQ== */");
    }
    return (0, import_i18n.isRTL)() ? /* @__PURE__ */ (0, import_react.css)(convertLTRToRTL(ltrStyles), process.env.NODE_ENV === "production" ? "" : ";label:rtl;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ0bC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRm1CIiwiZmlsZSI6InJ0bC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGlzUlRMIH0gZnJvbSAnQHdvcmRwcmVzcy9pMThuJztcblxuY29uc3QgTE9XRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLWxlZnQvZyApO1xuY29uc3QgTE9XRVJfUklHSFRfUkVHRVhQID0gbmV3IFJlZ0V4cCggLy1yaWdodC9nICk7XG5jb25zdCBVUFBFUl9MRUZUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9MZWZ0L2cgKTtcbmNvbnN0IFVQUEVSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9SaWdodC9nICk7XG5cbi8qKlxuICogRmxpcHMgYSBDU1MgcHJvcGVydHkgZnJvbSBsZWZ0IDwtPiByaWdodC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBDU1MgcHJvcGVydHkgbmFtZS5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmbGlwcGVkIENTUyBwcm9wZXJ0eSBuYW1lLCBpZiBhcHBsaWNhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRDb252ZXJ0ZWRLZXkoIGtleSApIHtcblx0aWYgKCBrZXkgPT09ICdsZWZ0JyApIHtcblx0XHRyZXR1cm4gJ3JpZ2h0Jztcblx0fVxuXG5cdGlmICgga2V5ID09PSAncmlnaHQnICkge1xuXHRcdHJldHVybiAnbGVmdCc7XG5cdH1cblxuXHRpZiAoIExPV0VSX0xFRlRfUkVHRVhQLnRlc3QoIGtleSApICkge1xuXHRcdHJldHVybiBrZXkucmVwbGFjZSggTE9XRVJfTEVGVF9SRUdFWFAsICctcmlnaHQnICk7XG5cdH1cblxuXHRpZiAoIExPV0VSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIExPV0VSX1JJR0hUX1JFR0VYUCwgJy1sZWZ0JyApO1xuXHR9XG5cblx0aWYgKCBVUFBFUl9MRUZUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX0xFRlRfUkVHRVhQLCAnUmlnaHQnICk7XG5cdH1cblxuXHRpZiAoIFVQUEVSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX1JJR0hUX1JFR0VYUCwgJ0xlZnQnICk7XG5cdH1cblxuXHRyZXR1cm4ga2V5O1xufVxuXG4vKipcbiAqIEFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBjb252ZXJ0ZXIgZm9yIHN0eWxlIHByb3BlcnRpZXNcbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXNcbiAqXG4gKiBAcmV0dXJuIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gQ29udmVydGVkIGx0ciAtPiBydGwgc3R5bGVzXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0TFRSVG9SVEwgPSAoIGx0clN0eWxlcyA9IHt9ICkgPT4ge1xuXHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxuXHRcdE9iamVjdC5lbnRyaWVzKCBsdHJTdHlsZXMgKS5tYXAoICggWyBrZXksIHZhbHVlIF0gKSA9PiBbXG5cdFx0XHRnZXRDb252ZXJ0ZWRLZXkoIGtleSApLFxuXHRcdFx0dmFsdWUsXG5cdFx0XSApXG5cdCk7XG59O1xuXG4vKipcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlIGFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBzdHlsZSBjb252ZXJ0ZXIgZm9yIENTUyBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IGx0clN0eWxlcyAgIEx0ciBzdHlsZXMuIENvbnZlcnRzIGFuZCByZW5kZXJzIGZyb20gbHRyIC0+IHJ0bCBzdHlsZXMsIGlmIGFwcGxpY2FibGUuXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBbcnRsU3R5bGVzXSBSdGwgc3R5bGVzLiBSZW5kZXJzIGlmIHByb3ZpZGVkLlxuICpcbiAqIEByZXR1cm4geygpID0+IGltcG9ydCgnQGVtb3Rpb24vcmVhY3QnKS5TZXJpYWxpemVkU3R5bGVzfSBBIGZ1bmN0aW9uIHRvIG91dHB1dCBDU1Mgc3R5bGVzIGZvciBFbW90aW9uJ3MgcmVuZGVyZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ0bCggbHRyU3R5bGVzID0ge30sIHJ0bFN0eWxlcyApIHtcblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoIHJ0bFN0eWxlcyApIHtcblx0XHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3Ncblx0XHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBydGxTdHlsZXMgKSA6IGNzcyggbHRyU3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQHRzLWlnbm9yZTogYGNzc2AgdHlwZXMgYXJlIHdyb25nLCBpdCBjYW4gYWNjZXB0IGFuIG9iamVjdDogaHR0cHM6Ly9lbW90aW9uLnNoL2RvY3Mvb2JqZWN0LXN0eWxlcyN3aXRoLWNzc1xuXHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBjb252ZXJ0TFRSVG9SVEwoIGx0clN0eWxlcyApICkgOiBjc3MoIGx0clN0eWxlcyApO1xuXHR9O1xufVxuXG4vKipcbiAqIENhbGwgdGhpcyBpbiB0aGUgYHVzZU1lbW9gIGRlcGVuZGVuY3kgYXJyYXkgdG8gZW5zdXJlIHRoYXQgc3Vic2VxdWVudCByZW5kZXJzIHdpbGxcbiAqIGNhdXNlIHJ0bCBzdHlsZXMgdG8gdXBkYXRlIGJhc2VkIG9uIHRoZSBgaXNSVExgIHJldHVybiB2YWx1ZSBldmVuIGlmIGFsbCBvdGhlciBkZXBlbmRlbmNpZXNcbiAqIHJlbWFpbiB0aGUgc2FtZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgc3R5bGVzID0gdXNlTWVtbyggKCkgPT4ge1xuICogICByZXR1cm4gY3NzYFxuICogICAgICR7IHJ0bCggeyBtYXJnaW5SaWdodDogJzEwcHgnIH0gKSB9XG4gKiAgIGA7XG4gKiB9LCBbIHJ0bC53YXRjaCgpIF0gKTtcbiAqL1xucnRsLndhdGNoID0gKCkgPT4gaXNSVEwoKTtcbiJdfQ== */") : /* @__PURE__ */ (0, import_react.css)(ltrStyles, process.env.NODE_ENV === "production" ? "" : ";label:rtl;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ0bC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRnlEIiwiZmlsZSI6InJ0bC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGlzUlRMIH0gZnJvbSAnQHdvcmRwcmVzcy9pMThuJztcblxuY29uc3QgTE9XRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvLWxlZnQvZyApO1xuY29uc3QgTE9XRVJfUklHSFRfUkVHRVhQID0gbmV3IFJlZ0V4cCggLy1yaWdodC9nICk7XG5jb25zdCBVUFBFUl9MRUZUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9MZWZ0L2cgKTtcbmNvbnN0IFVQUEVSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC9SaWdodC9nICk7XG5cbi8qKlxuICogRmxpcHMgYSBDU1MgcHJvcGVydHkgZnJvbSBsZWZ0IDwtPiByaWdodC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBDU1MgcHJvcGVydHkgbmFtZS5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmbGlwcGVkIENTUyBwcm9wZXJ0eSBuYW1lLCBpZiBhcHBsaWNhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRDb252ZXJ0ZWRLZXkoIGtleSApIHtcblx0aWYgKCBrZXkgPT09ICdsZWZ0JyApIHtcblx0XHRyZXR1cm4gJ3JpZ2h0Jztcblx0fVxuXG5cdGlmICgga2V5ID09PSAncmlnaHQnICkge1xuXHRcdHJldHVybiAnbGVmdCc7XG5cdH1cblxuXHRpZiAoIExPV0VSX0xFRlRfUkVHRVhQLnRlc3QoIGtleSApICkge1xuXHRcdHJldHVybiBrZXkucmVwbGFjZSggTE9XRVJfTEVGVF9SRUdFWFAsICctcmlnaHQnICk7XG5cdH1cblxuXHRpZiAoIExPV0VSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIExPV0VSX1JJR0hUX1JFR0VYUCwgJy1sZWZ0JyApO1xuXHR9XG5cblx0aWYgKCBVUFBFUl9MRUZUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX0xFRlRfUkVHRVhQLCAnUmlnaHQnICk7XG5cdH1cblxuXHRpZiAoIFVQUEVSX1JJR0hUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIFVQUEVSX1JJR0hUX1JFR0VYUCwgJ0xlZnQnICk7XG5cdH1cblxuXHRyZXR1cm4ga2V5O1xufVxuXG4vKipcbiAqIEFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBjb252ZXJ0ZXIgZm9yIHN0eWxlIHByb3BlcnRpZXNcbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXNcbiAqXG4gKiBAcmV0dXJuIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gQ29udmVydGVkIGx0ciAtPiBydGwgc3R5bGVzXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0TFRSVG9SVEwgPSAoIGx0clN0eWxlcyA9IHt9ICkgPT4ge1xuXHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxuXHRcdE9iamVjdC5lbnRyaWVzKCBsdHJTdHlsZXMgKS5tYXAoICggWyBrZXksIHZhbHVlIF0gKSA9PiBbXG5cdFx0XHRnZXRDb252ZXJ0ZWRLZXkoIGtleSApLFxuXHRcdFx0dmFsdWUsXG5cdFx0XSApXG5cdCk7XG59O1xuXG4vKipcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlIGFuIGluY3JlZGlibHkgYmFzaWMgbHRyIC0+IHJ0bCBzdHlsZSBjb252ZXJ0ZXIgZm9yIENTUyBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IGx0clN0eWxlcyAgIEx0ciBzdHlsZXMuIENvbnZlcnRzIGFuZCByZW5kZXJzIGZyb20gbHRyIC0+IHJ0bCBzdHlsZXMsIGlmIGFwcGxpY2FibGUuXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBbcnRsU3R5bGVzXSBSdGwgc3R5bGVzLiBSZW5kZXJzIGlmIHByb3ZpZGVkLlxuICpcbiAqIEByZXR1cm4geygpID0+IGltcG9ydCgnQGVtb3Rpb24vcmVhY3QnKS5TZXJpYWxpemVkU3R5bGVzfSBBIGZ1bmN0aW9uIHRvIG91dHB1dCBDU1Mgc3R5bGVzIGZvciBFbW90aW9uJ3MgcmVuZGVyZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ0bCggbHRyU3R5bGVzID0ge30sIHJ0bFN0eWxlcyApIHtcblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoIHJ0bFN0eWxlcyApIHtcblx0XHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3Ncblx0XHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBydGxTdHlsZXMgKSA6IGNzcyggbHRyU3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQHRzLWlnbm9yZTogYGNzc2AgdHlwZXMgYXJlIHdyb25nLCBpdCBjYW4gYWNjZXB0IGFuIG9iamVjdDogaHR0cHM6Ly9lbW90aW9uLnNoL2RvY3Mvb2JqZWN0LXN0eWxlcyN3aXRoLWNzc1xuXHRcdHJldHVybiBpc1JUTCgpID8gY3NzKCBjb252ZXJ0TFRSVG9SVEwoIGx0clN0eWxlcyApICkgOiBjc3MoIGx0clN0eWxlcyApO1xuXHR9O1xufVxuXG4vKipcbiAqIENhbGwgdGhpcyBpbiB0aGUgYHVzZU1lbW9gIGRlcGVuZGVuY3kgYXJyYXkgdG8gZW5zdXJlIHRoYXQgc3Vic2VxdWVudCByZW5kZXJzIHdpbGxcbiAqIGNhdXNlIHJ0bCBzdHlsZXMgdG8gdXBkYXRlIGJhc2VkIG9uIHRoZSBgaXNSVExgIHJldHVybiB2YWx1ZSBldmVuIGlmIGFsbCBvdGhlciBkZXBlbmRlbmNpZXNcbiAqIHJlbWFpbiB0aGUgc2FtZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgc3R5bGVzID0gdXNlTWVtbyggKCkgPT4ge1xuICogICByZXR1cm4gY3NzYFxuICogICAgICR7IHJ0bCggeyBtYXJnaW5SaWdodDogJzEwcHgnIH0gKSB9XG4gKiAgIGA7XG4gKiB9LCBbIHJ0bC53YXRjaCgpIF0gKTtcbiAqL1xucnRsLndhdGNoID0gKCkgPT4gaXNSVEwoKTtcbiJdfQ== */");
  };
}
rtl.watch = () => (0, import_i18n.isRTL)();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  convertLTRToRTL,
  rtl
});
//# sourceMappingURL=rtl.js.map
