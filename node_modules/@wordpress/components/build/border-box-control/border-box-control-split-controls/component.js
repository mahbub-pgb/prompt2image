"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var component_exports = {};
__export(component_exports, {
  default: () => component_default
});
module.exports = __toCommonJS(component_exports);
var import_i18n = require("@wordpress/i18n");
var import_element = require("@wordpress/element");
var import_compose = require("@wordpress/compose");
var import_border_box_control_visualizer = __toESM(require("../border-box-control-visualizer"));
var import_border_control = require("../../border-control");
var import_grid = require("../../grid");
var import_context = require("../../context");
var import_hook = require("./hook");
var import_jsx_runtime = require("react/jsx-runtime");
const BorderBoxControlSplitControls = (props, forwardedRef) => {
  const {
    centeredClassName,
    colors,
    disableCustomColors,
    enableAlpha,
    enableStyle,
    onChange,
    popoverPlacement,
    popoverOffset,
    rightAlignedClassName,
    size = "default",
    value,
    __experimentalIsRenderedInSidebar,
    ...otherProps
  } = (0, import_hook.useBorderBoxControlSplitControls)(props);
  const [popoverAnchor, setPopoverAnchor] = (0, import_element.useState)(null);
  const popoverProps = (0, import_element.useMemo)(() => popoverPlacement ? {
    placement: popoverPlacement,
    offset: popoverOffset,
    anchor: popoverAnchor,
    shift: true
  } : void 0, [popoverPlacement, popoverOffset, popoverAnchor]);
  const sharedBorderControlProps = {
    colors,
    disableCustomColors,
    enableAlpha,
    enableStyle,
    isCompact: true,
    __experimentalIsRenderedInSidebar,
    size,
    __shouldNotWarnDeprecated36pxSize: true
  };
  const mergedRef = (0, import_compose.useMergeRefs)([setPopoverAnchor, forwardedRef]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_grid.Grid, {
    ...otherProps,
    ref: mergedRef,
    gap: 3,
    children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_border_box_control_visualizer.default, {
      value,
      size
    }), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_border_control.BorderControl, {
      className: centeredClassName,
      hideLabelFromVision: true,
      label: (0, import_i18n.__)("Top border"),
      onChange: (newBorder) => onChange(newBorder, "top"),
      __unstablePopoverProps: popoverProps,
      value: value?.top,
      ...sharedBorderControlProps
    }), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_border_control.BorderControl, {
      hideLabelFromVision: true,
      label: (0, import_i18n.__)("Left border"),
      onChange: (newBorder) => onChange(newBorder, "left"),
      __unstablePopoverProps: popoverProps,
      value: value?.left,
      ...sharedBorderControlProps
    }), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_border_control.BorderControl, {
      className: rightAlignedClassName,
      hideLabelFromVision: true,
      label: (0, import_i18n.__)("Right border"),
      onChange: (newBorder) => onChange(newBorder, "right"),
      __unstablePopoverProps: popoverProps,
      value: value?.right,
      ...sharedBorderControlProps
    }), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_border_control.BorderControl, {
      className: centeredClassName,
      hideLabelFromVision: true,
      label: (0, import_i18n.__)("Bottom border"),
      onChange: (newBorder) => onChange(newBorder, "bottom"),
      __unstablePopoverProps: popoverProps,
      value: value?.bottom,
      ...sharedBorderControlProps
    })]
  });
};
const ConnectedBorderBoxControlSplitControls = (0, import_context.contextConnect)(BorderBoxControlSplitControls, "BorderBoxControlSplitControls");
var component_default = ConnectedBorderBoxControlSplitControls;
//# sourceMappingURL=component.js.map
