{
  "version": 3,
  "sources": ["../../src/spacer/component.tsx"],
  "sourcesContent": ["/**\n * External dependencies\n */\n\n/**\n * Internal dependencies\n */\n\nimport { contextConnect } from '../context';\nimport { View } from '../view';\nimport { useSpacer } from './hook';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction UnconnectedSpacer(props, forwardedRef) {\n  const spacerProps = useSpacer(props);\n  return /*#__PURE__*/_jsx(View, {\n    ...spacerProps,\n    ref: forwardedRef\n  });\n}\n\n/**\n * `Spacer` is a primitive layout component that providers inner (`padding`) or outer (`margin`) space in-between components. It can also be used to adaptively provide space within an `HStack` or `VStack`.\n *\n * `Spacer` comes with a bunch of shorthand props to adjust `margin` and `padding`. The values of these props\n * can either be a number (which will act as a multiplier to the library's grid system base of 4px),\n * or a literal CSS value string.\n *\n * ```jsx\n * import { Spacer } from `@wordpress/components`\n *\n * function Example() {\n *   return (\n *     <View>\n *       <Spacer>\n *         <Heading>WordPress.org</Heading>\n *       </Spacer>\n *       <Text>\n *         Code is Poetry\n *       </Text>\n *     </View>\n *   );\n * }\n * ```\n */\nexport const Spacer = contextConnect(UnconnectedSpacer, 'Spacer');\nexport default Spacer;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,qBAA+B;AAC/B,kBAAqB;AACrB,kBAA0B;AAC1B,yBAA4B;AAC5B,SAAS,kBAAkB,OAAO,cAAc;AAC9C,QAAM,kBAAc,uBAAU,KAAK;AACnC,SAAoB,uCAAAA,KAAK,kBAAM;AAAA,IAC7B,GAAG;AAAA,IACH,KAAK;AAAA,EACP,CAAC;AACH;AA0BO,MAAM,aAAS,+BAAe,mBAAmB,QAAQ;AAChE,IAAO,oBAAQ;",
  "names": ["_jsx"]
}
