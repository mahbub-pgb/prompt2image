"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var styles_exports = {};
__export(styles_exports, {
  CheckboxItem: () => CheckboxItem,
  Group: () => Group,
  GroupLabel: () => GroupLabel,
  Item: () => Item,
  ItemChildrenWrapper: () => ItemChildrenWrapper,
  ItemContentWrapper: () => ItemContentWrapper,
  ItemHelpText: () => ItemHelpText,
  ItemLabel: () => ItemLabel,
  ItemPrefixWrapper: () => ItemPrefixWrapper,
  ItemSuffixWrapper: () => ItemSuffixWrapper,
  PopoverInnerWrapper: () => PopoverInnerWrapper,
  PopoverOuterWrapper: () => PopoverOuterWrapper,
  RadioItem: () => RadioItem,
  Separator: () => Separator,
  SubmenuChevronIcon: () => SubmenuChevronIcon
});
module.exports = __toCommonJS(styles_exports);
var import_base = __toESM(require("@emotion/styled/base"));
var Ariakit = __toESM(require("@ariakit/react"));
var import_react = require("@emotion/react");
var import_utils = require("../utils");
var import_space = require("../utils/space");
var import_icon = __toESM(require("../icon"));
var import_truncate = require("../truncate");
function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
const ANIMATION_PARAMS = {
  SCALE_AMOUNT_OUTER: 0.82,
  SCALE_AMOUNT_CONTENT: 0.9,
  DURATION: {
    IN: "400ms",
    OUT: "200ms"
  },
  EASING: "cubic-bezier(0.33, 0, 0, 1)"
};
const CONTENT_WRAPPER_PADDING = (0, import_space.space)(1);
const ITEM_PADDING_BLOCK = (0, import_space.space)(2);
const ITEM_PADDING_INLINE = (0, import_space.space)(3);
const DEFAULT_BORDER_COLOR = import_utils.COLORS.theme.gray[300];
const DIVIDER_COLOR = import_utils.COLORS.theme.gray[200];
const LIGHTER_TEXT_COLOR = import_utils.COLORS.theme.gray[700];
const LIGHT_BACKGROUND_COLOR = import_utils.COLORS.theme.gray[100];
const TOOLBAR_VARIANT_BORDER_COLOR = import_utils.COLORS.theme.foreground;
const DEFAULT_BOX_SHADOW = `0 0 0 ${import_utils.CONFIG.borderWidth} ${DEFAULT_BORDER_COLOR}, ${import_utils.CONFIG.elevationMedium}`;
const TOOLBAR_VARIANT_BOX_SHADOW = `0 0 0 ${import_utils.CONFIG.borderWidth} ${TOOLBAR_VARIANT_BORDER_COLOR}`;
const GRID_TEMPLATE_COLS = "minmax( 0, max-content ) 1fr";
const PopoverOuterWrapper = /* @__PURE__ */ (0, import_base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti14"
} : {
  target: "e1wg7tti14",
  label: "PopoverOuterWrapper"
})("position:relative;background-color:", import_utils.COLORS.ui.background, ";border-radius:", import_utils.CONFIG.radiusMedium, ";", (props) => /* @__PURE__ */ (0, import_react.css)("box-shadow:", props.variant === "toolbar" ? TOOLBAR_VARIANT_BOX_SHADOW : DEFAULT_BOX_SHADOW, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:PopoverOuterWrapper;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " overflow:hidden;@media not ( prefers-reduced-motion ){transition-property:transform,opacity;transition-timing-function:", ANIMATION_PARAMS.EASING, ";transition-duration:", ANIMATION_PARAMS.DURATION.IN, ";will-change:transform,opacity;opacity:0;&:has( [data-enter] ){opacity:1;}&:has( [data-leave] ){transition-duration:", ANIMATION_PARAMS.DURATION.OUT, ";}&:has( [data-side='bottom'] ),&:has( [data-side='top'] ){transform:scaleY( ", ANIMATION_PARAMS.SCALE_AMOUNT_OUTER, " );}&:has( [data-side='bottom'] ){transform-origin:top;}&:has( [data-side='top'] ){transform-origin:bottom;}&:has( [data-enter][data-side='bottom'] ),&:has( [data-enter][data-side='top'] ),&:has( [data-leave][data-side='bottom'] ),&:has( [data-leave][data-side='top'] ){transform:scaleY( 1 );}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PopoverInnerWrapper = /* @__PURE__ */ (0, import_base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti13"
} : {
  target: "e1wg7tti13",
  label: "PopoverInnerWrapper"
})("position:relative;z-index:1000000;display:grid;grid-template-columns:", GRID_TEMPLATE_COLS, ";grid-template-rows:auto;box-sizing:border-box;min-width:160px;max-width:320px;max-height:var( --popover-available-height );padding:", CONTENT_WRAPPER_PADDING, ";overscroll-behavior:contain;overflow:auto;outline:2px solid transparent!important;@media not ( prefers-reduced-motion ){transition:inherit;transform-origin:inherit;&[data-side='bottom'],&[data-side='top']{transform:scaleY(\n				calc(\n					1 / ", ANIMATION_PARAMS.SCALE_AMOUNT_OUTER, " *\n						", ANIMATION_PARAMS.SCALE_AMOUNT_CONTENT, "\n				)\n			);}&[data-enter][data-side='bottom'],&[data-enter][data-side='top'],&[data-leave][data-side='bottom'],&[data-leave][data-side='top']{transform:scaleY( 1 );}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpRzZDIiwiZmlsZSI6InN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCAqIGFzIEFyaWFraXQgZnJvbSAnQGFyaWFraXQvcmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIGZvbnQsIHJ0bCwgQ09ORklHIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29uJztcbmltcG9ydCB7IFRydW5jYXRlIH0gZnJvbSAnLi4vdHJ1bmNhdGUnO1xuaW1wb3J0IHR5cGUgeyBDb250ZXh0UHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgQU5JTUFUSU9OX1BBUkFNUyA9IHtcblx0U0NBTEVfQU1PVU5UX09VVEVSOiAwLjgyLFxuXHRTQ0FMRV9BTU9VTlRfQ09OVEVOVDogMC45LFxuXHREVVJBVElPTjoge1xuXHRcdElOOiAnNDAwbXMnLFxuXHRcdE9VVDogJzIwMG1zJyxcblx0fSxcblx0RUFTSU5HOiAnY3ViaWMtYmV6aWVyKDAuMzMsIDAsIDAsIDEpJyxcbn07XG5cbmNvbnN0IENPTlRFTlRfV1JBUFBFUl9QQURESU5HID0gc3BhY2UoIDEgKTtcbmNvbnN0IElURU1fUEFERElOR19CTE9DSyA9IHNwYWNlKCAyICk7XG5jb25zdCBJVEVNX1BBRERJTkdfSU5MSU5FID0gc3BhY2UoIDMgKTtcblxuLy8gVE9ETzpcbi8vIC0gYm9yZGVyIGNvbG9yIGFuZCBkaXZpZGVyIGNvbG9yIGFyZSBkaWZmZXJlbnQgZnJvbSBDT0xPUlMudGhlbWUgdmFyaWFibGVzXG4vLyAtIGxpZ2h0ZXIgdGV4dCBjb2xvciBpcyBub3QgZGVmaW5lZCBpbiBDT0xPUlMudGhlbWUsIHNob3VsZCBpdCBiZT9cbi8vIC0gbGlnaHRlciBiYWNrZ3JvdW5kIGNvbG9yIGlzIG5vdCBkZWZpbmVkIGluIENPTE9SUy50aGVtZSwgc2hvdWxkIGl0IGJlP1xuY29uc3QgREVGQVVMVF9CT1JERVJfQ09MT1IgPSBDT0xPUlMudGhlbWUuZ3JheVsgMzAwIF07XG5jb25zdCBESVZJREVSX0NPTE9SID0gQ09MT1JTLnRoZW1lLmdyYXlbIDIwMCBdO1xuY29uc3QgTElHSFRFUl9URVhUX0NPTE9SID0gQ09MT1JTLnRoZW1lLmdyYXlbIDcwMCBdO1xuY29uc3QgTElHSFRfQkFDS0dST1VORF9DT0xPUiA9IENPTE9SUy50aGVtZS5ncmF5WyAxMDAgXTtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgPSBDT0xPUlMudGhlbWUuZm9yZWdyb3VuZDtcbmNvbnN0IERFRkFVTFRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBERUZBVUxUX0JPUkRFUl9DT0xPUiB9LCAkeyBDT05GSUcuZWxldmF0aW9uTWVkaXVtIH1gO1xuY29uc3QgVE9PTEJBUl9WQVJJQU5UX0JPWF9TSEFET1cgPSBgMCAwIDAgJHsgQ09ORklHLmJvcmRlcldpZHRoIH0gJHsgVE9PTEJBUl9WQVJJQU5UX0JPUkRFUl9DT0xPUiB9YDtcblxuY29uc3QgR1JJRF9URU1QTEFURV9DT0xTID0gJ21pbm1heCggMCwgbWF4LWNvbnRlbnQgKSAxZnInO1xuXG5leHBvcnQgY29uc3QgUG9wb3Zlck91dGVyV3JhcHBlciA9IHN0eWxlZC5kaXY8XG5cdFBpY2s8IENvbnRleHRQcm9wcywgJ3ZhcmlhbnQnID5cbj5gXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuXHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMudWkuYmFja2dyb3VuZCB9O1xuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzTWVkaXVtIH07XG5cdCR7ICggcHJvcHMgKSA9PiBjc3NgXG5cdFx0Ym94LXNoYWRvdzogJHsgcHJvcHMudmFyaWFudCA9PT0gJ3Rvb2xiYXInXG5cdFx0XHQ/IFRPT0xCQVJfVkFSSUFOVF9CT1hfU0hBRE9XXG5cdFx0XHQ6IERFRkFVTFRfQk9YX1NIQURPVyB9O1xuXHRgIH1cblxuXHRvdmVyZmxvdzogaGlkZGVuO1xuXG5cdC8qIE9wZW4vY2xvc2UgYW5pbWF0aW9uIChvdXRlciB3cmFwcGVyKSAqL1xuXHRAbWVkaWEgbm90ICggcHJlZmVycy1yZWR1Y2VkLW1vdGlvbiApIHtcblx0XHR0cmFuc2l0aW9uLXByb3BlcnR5OiB0cmFuc2Zvcm0sIG9wYWNpdHk7XG5cdFx0dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRUFTSU5HIH07XG5cdFx0dHJhbnNpdGlvbi1kdXJhdGlvbjogJHsgQU5JTUFUSU9OX1BBUkFNUy5EVVJBVElPTi5JTiB9O1xuXHRcdHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XG5cblx0XHQvKiBSZWdhcmRsZXNzIG9mIHRoZSBzaWRlLCBmYWRlIGluIGFuZCBvdXQuICovXG5cdFx0b3BhY2l0eTogMDtcblx0XHQmOmhhcyggW2RhdGEtZW50ZXJdICkge1xuXHRcdFx0b3BhY2l0eTogMTtcblx0XHR9XG5cblx0XHQmOmhhcyggW2RhdGEtbGVhdmVdICkge1xuXHRcdFx0dHJhbnNpdGlvbi1kdXJhdGlvbjogJHsgQU5JTUFUSU9OX1BBUkFNUy5EVVJBVElPTi5PVVQgfTtcblx0XHR9XG5cblx0XHQvKiBGb3IgbWVudXMgb3BlbmluZyBvbiB0b3AgYW5kIGJvdHRvbSBzaWRlLCBhbmltYXRlIHRoZSBzY2FsZSBZIHRvby4gKi9cblx0XHQmOmhhcyggW2RhdGEtc2lkZT0nYm90dG9tJ10gKSxcblx0XHQmOmhhcyggW2RhdGEtc2lkZT0ndG9wJ10gKSB7XG5cdFx0XHR0cmFuc2Zvcm06IHNjYWxlWSggJHsgQU5JTUFUSU9OX1BBUkFNUy5TQ0FMRV9BTU9VTlRfT1VURVIgfSApO1xuXHRcdH1cblx0XHQmOmhhcyggW2RhdGEtc2lkZT0nYm90dG9tJ10gKSB7XG5cdFx0XHR0cmFuc2Zvcm0tb3JpZ2luOiB0b3A7XG5cdFx0fVxuXHRcdCY6aGFzKCBbZGF0YS1zaWRlPSd0b3AnXSApIHtcblx0XHRcdHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbTtcblx0XHR9XG5cdFx0JjpoYXMoIFtkYXRhLWVudGVyXVtkYXRhLXNpZGU9J2JvdHRvbSddICksXG5cdFx0JjpoYXMoIFtkYXRhLWVudGVyXVtkYXRhLXNpZGU9J3RvcCddICksXG5cdFx0LyogRG8gbm90IGFuaW1hdGUgdGhlIHNjYWxlWSB3aGVuIGNsb3NpbmcgdGhlIG1lbnUgKi9cblx0XHQmOmhhcyggW2RhdGEtbGVhdmVdW2RhdGEtc2lkZT0nYm90dG9tJ10gKSxcblx0XHQmOmhhcyggW2RhdGEtbGVhdmVdW2RhdGEtc2lkZT0ndG9wJ10gKSB7XG5cdFx0XHR0cmFuc2Zvcm06IHNjYWxlWSggMSApO1xuXHRcdH1cblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IFBvcG92ZXJJbm5lcldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdC8qIFNhbWUgYXMgcG9wb3ZlciBjb21wb25lbnQgKi9cblx0LyogVE9ETzogaXMgdGhlcmUgYSB3YXkgdG8gcmVhZCB0aGUgc2FzcyB2YXJpYWJsZT8gKi9cblx0ei1pbmRleDogMTAwMDAwMDtcblxuXHRkaXNwbGF5OiBncmlkO1xuXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6ICR7IEdSSURfVEVNUExBVEVfQ09MUyB9O1xuXHRncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XG5cblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0bWluLXdpZHRoOiAxNjBweDtcblx0bWF4LXdpZHRoOiAzMjBweDtcblx0bWF4LWhlaWdodDogdmFyKCAtLXBvcG92ZXItYXZhaWxhYmxlLWhlaWdodCApO1xuXG5cdHBhZGRpbmc6ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0b3ZlcnNjcm9sbC1iZWhhdmlvcjogY29udGFpbjtcblx0b3ZlcmZsb3c6IGF1dG87XG5cblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuXG5cdC8qIE9wZW4vY2xvc2UgYW5pbWF0aW9uIChpbm5lciBjb250ZW50IHdyYXBwZXIpICovXG5cdEBtZWRpYSBub3QgKCBwcmVmZXJzLXJlZHVjZWQtbW90aW9uICkge1xuXHRcdHRyYW5zaXRpb246IGluaGVyaXQ7XG5cdFx0dHJhbnNmb3JtLW9yaWdpbjogaW5oZXJpdDtcblxuXHRcdC8qXG5cdFx0ICogRm9yIG1lbnVzIG9wZW5pbmcgb24gdG9wIGFuZCBib3R0b20gc2lkZSwgYW5pbWF0ZSB0aGUgc2NhbGUgWSB0b28uXG5cdFx0ICogVGhlIGNvbnRlbnQgc2NhbGVzIGF0IGEgZGlmZmVyZW50IHJhdGUgdGhhbiB0aGUgb3V0ZXIgY29udGFpbmVyOlxuXHRcdCAqIC0gZmlyc3QsIGNvdW50ZXIgdGhlIG91dGVyIHNjYWxlIGZhY3RvciBieSBkb2luZyBcIjEgLyBzY2FsZUFtb3VudE91dGVyXCJcblx0XHQgKiAtIHRoZW4sIGFwcGx5IHRoZSBjb250ZW50IHNjYWxlIGZhY3Rvci5cblx0XHQgKi9cblx0XHQmW2RhdGEtc2lkZT0nYm90dG9tJ10sXG5cdFx0JltkYXRhLXNpZGU9J3RvcCddIHtcblx0XHRcdHRyYW5zZm9ybTogc2NhbGVZKFxuXHRcdFx0XHRjYWxjKFxuXHRcdFx0XHRcdDEgLyAkeyBBTklNQVRJT05fUEFSQU1TLlNDQUxFX0FNT1VOVF9PVVRFUiB9ICpcblx0XHRcdFx0XHRcdCR7IEFOSU1BVElPTl9QQVJBTVMuU0NBTEVfQU1PVU5UX0NPTlRFTlQgfVxuXHRcdFx0XHQpXG5cdFx0XHQpO1xuXHRcdH1cblx0XHQmW2RhdGEtZW50ZXJdW2RhdGEtc2lkZT0nYm90dG9tJ10sXG5cdFx0JltkYXRhLWVudGVyXVtkYXRhLXNpZGU9J3RvcCddLFxuXHRcdC8qIERvIG5vdCBhbmltYXRlIHRoZSBzY2FsZVkgd2hlbiBjbG9zaW5nIHRoZSBtZW51ICovXG5cdFx0JltkYXRhLWxlYXZlXVtkYXRhLXNpZGU9J2JvdHRvbSddLFxuXHRcdCZbZGF0YS1sZWF2ZV1bZGF0YS1zaWRlPSd0b3AnXSB7XG5cdFx0XHR0cmFuc2Zvcm06IHNjYWxlWSggMSApO1xuXHRcdH1cblx0fVxuYDtcblxuY29uc3QgYmFzZUl0ZW0gPSBjc3NgXG5cdGFsbDogdW5zZXQ7XG5cblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRtaW4taGVpZ2h0OiAkeyBzcGFjZSggMTAgKSB9O1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG5cdC8qIE9jY3VweSB0aGUgd2lkdGggb2YgYWxsIGdyaWQgY29sdW1ucyAoaWUuIGZ1bGwgd2lkdGgpICovXG5cdGdyaWQtY29sdW1uOiAxIC8gLTE7XG5cblx0ZGlzcGxheTogZ3JpZDtcblx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAkeyBHUklEX1RFTVBMQVRFX0NPTFMgfTtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRAc3VwcG9ydHMgKCBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHN1YmdyaWQgKSB7XG5cdFx0Lypcblx0XHQgKiBEZWZpbmUgYSBncmlkIGxheW91dCB3aGljaCBpbmhlcml0cyB0aGUgc2FtZSBjb2x1bW5zIGNvbmZpZ3VyYXRpb25cblx0XHQgKiBmcm9tIHRoZSBwYXJlbnQgbGF5b3V0IChpZS4gc3ViZ3JpZCkuIFRoaXMgYWxsb3dzIHRoZSBtZW51XG5cdFx0ICogdG8gc3luY2hyb25pemUgdGhlIGluZGVudGF0aW9uIG9mIGFsbCBpdHMgaXRlbXMuXG5cdFx0ICovXG5cdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBzdWJncmlkO1xuXHR9XG5cblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xuXHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0bGluZS1oZWlnaHQ6IDIwcHg7XG5cblx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5mb3JlZ3JvdW5kIH07XG5cdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNTbWFsbCB9O1xuXG5cdHBhZGRpbmctYmxvY2s6ICR7IElURU1fUEFERElOR19CTE9DSyB9O1xuXHRwYWRkaW5nLWlubGluZTogJHsgSVRFTV9QQURESU5HX0lOTElORSB9O1xuXG5cdC8qXG5cdCAqIE1ha2Ugc3VyZSB0aGF0LCB3aGVuIGFuIGl0ZW0gaXMgc2Nyb2xsZWQgaW50byB2aWV3IChlZy4gd2hpbGUgdXNpbmcgdGhlXG5cdCAqIGtleWJvYXJkIHRvIG1vdmUgZm9jdXMpLCB0aGUgd2hvbGUgaXRlbSBjb21lcyBpbnRvIHZpZXdcblx0ICovXG5cdHNjcm9sbC1tYXJnaW46ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdG91dGxpbmU6IG5vbmU7XG5cblx0JlthcmlhLWRpc2FibGVkPSd0cnVlJ10ge1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGV4dERpc2FibGVkIH07XG5cdFx0Y3Vyc29yOiBub3QtYWxsb3dlZDtcblx0fVxuXG5cdC8qIEFjdGl2ZSBpdGVtIChpbmNsdWRpbmcgaG92ZXIpICovXG5cdCZbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApOm5vdChcblx0XHRcdFthcmlhLWRpc2FibGVkPSd0cnVlJ11cblx0XHQpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdFx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnRJbnZlcnRlZCB9O1xuXHR9XG5cblx0LyogS2V5Ym9hcmQgZm9jdXMgKGZvY3VzLXZpc2libGUpICovXG5cdCZbZGF0YS1mb2N1cy12aXNpYmxlXSB7XG5cdFx0Ym94LXNoYWRvdzogMCAwIDAgMS41cHggJHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xuXG5cdFx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdFx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHR9XG5cblx0LyogQWN0aXZlIChpZS4gcHJlc3NlZCwgbW91c2UgZG93bikgKi9cblx0JjphY3RpdmUsXG5cdCZbZGF0YS1hY3RpdmVdIHtcblx0XHQvKiBUT0RPOiBzaG91bGQgdGhlcmUgYmUgYSB2aXN1YWwgYWN0aXZlIHN0YXRlPyAqL1xuXHR9XG5cblx0LyogV2hlbiB0aGUgaXRlbSBpcyB0aGUgdHJpZ2dlciBvZiBhbiBvcGVuIHN1Ym1lbnUgKi9cblx0JHsgUG9wb3ZlcklubmVyV3JhcHBlciB9Om5vdCg6Zm9jdXMpICY6bm90KDpmb2N1cylbYXJpYS1leHBhbmRlZD1cInRydWVcIl0ge1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICR7IExJR0hUX0JBQ0tHUk9VTkRfQ09MT1IgfTtcblx0XHRjb2xvcjogJHsgQ09MT1JTLnRoZW1lLmZvcmVncm91bmQgfTtcblx0fVxuXG5cdHN2ZyB7XG5cdFx0ZmlsbDogY3VycmVudENvbG9yO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbSA9IHN0eWxlZCggQXJpYWtpdC5NZW51SXRlbSApYFxuXHQkeyBiYXNlSXRlbSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IENoZWNrYm94SXRlbSA9IHN0eWxlZCggQXJpYWtpdC5NZW51SXRlbUNoZWNrYm94IClgXG5cdCR7IGJhc2VJdGVtIH07XG5gO1xuXG5leHBvcnQgY29uc3QgUmFkaW9JdGVtID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVJdGVtUmFkaW8gKWBcblx0JHsgYmFzZUl0ZW0gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBJdGVtUHJlZml4V3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHQvKiBBbHdheXMgb2NjdXB5IHRoZSBmaXJzdCBjb2x1bW4sIGV2ZW4gd2hlbiBhdXRvLWNvbGxhcHNpbmcgKi9cblx0Z3JpZC1jb2x1bW46IDE7XG5cblx0Lypcblx0ICogRXZlbiB3aGVuIHRoZSBpdGVtIGlzIG5vdCBjaGVja2VkLCBvY2N1cHkgdGhlIHNhbWUgc2NyZWVuIHNwYWNlIHRvIGF2b2lkXG5cdCAqIHRoZSBzcGFjZSBjb2xsYXBzaWRlIHdoZW4gbm8gaXRlbXMgYXJlIGNoZWNrZWQuXG5cdCAqL1xuXHQkeyBDaGVja2JveEl0ZW0gfSA+ICYsXG5cdCR7IFJhZGlvSXRlbSB9ID4gJiB7XG5cdFx0LyogU2FtZSB3aWR0aCBhcyB0aGUgY2hlY2sgaWNvbnMgKi9cblx0XHRtaW4td2lkdGg6ICR7IHNwYWNlKCA2ICkgfTtcblx0fVxuXG5cdCR7IENoZWNrYm94SXRlbSB9ID4gJixcblx0JHsgUmFkaW9JdGVtIH0gPiAmLFxuXHQmOm5vdCggOmVtcHR5ICkge1xuXHRcdG1hcmdpbi1pbmxpbmUtZW5kOiAkeyBzcGFjZSggMiApIH07XG5cdH1cblxuXHRkaXNwbGF5OiBmbGV4O1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuXHRjb2xvcjogJHsgTElHSFRFUl9URVhUX0NPTE9SIH07XG5cblx0Lypcblx0KiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGFjdGl2ZSwgZXhjZXB0IHdoZW4gaXQncyBhIG5vbi1mb2N1c2VkL2hvdmVyZWRcblx0KiBzdWJtZW51IHRyaWdnZXIgKGluIHRoYXQgY2FzZSwgY29sb3Igc2hvdWxkIG5vdCBiZSBpbmhlcml0ZWQpXG5cdCovXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICkgPiAmLFxuXHQvKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGRpc2FibGVkICovXG5cdFthcmlhLWRpc2FibGVkPSd0cnVlJ10gPiAmIHtcblx0XHRjb2xvcjogaW5oZXJpdDtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IEl0ZW1Db250ZW50V3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdC8qXG5cdCAqIEFsd2F5cyBvY2N1cHkgdGhlIHNlY29uZCBjb2x1bW4sIHNpbmNlIHRoZSBmaXJzdCBjb2x1bW5cblx0ICogaXMgdGFrZW4gYnkgdGhlIHByZWZpeCB3cmFwcGVyICh3aGVuIGRpc3BsYXllZCkuXG5cdCAqL1xuXHRncmlkLWNvbHVtbjogMjtcblxuXHRkaXNwbGF5OiBmbGV4O1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cdGdhcDogJHsgc3BhY2UoIDMgKSB9O1xuXG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuYDtcblxuZXhwb3J0IGNvbnN0IEl0ZW1DaGlsZHJlbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRmbGV4OiAxO1xuXG5cdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRnYXA6ICR7IHNwYWNlKCAxICkgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBJdGVtU3VmZml4V3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRmbGV4OiAwIDEgZml0LWNvbnRlbnQ7XG5cdG1pbi13aWR0aDogMDtcblx0d2lkdGg6IGZpdC1jb250ZW50O1xuXG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRnYXA6ICR7IHNwYWNlKCAzICkgfTtcblxuXHRjb2xvcjogJHsgTElHSFRFUl9URVhUX0NPTE9SIH07XG5cblx0Lypcblx0ICogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBhY3RpdmUsIGV4Y2VwdCB3aGVuIGl0J3MgYSBub24tZm9jdXNlZC9ob3ZlcmVkXG5cdCAqIHN1Ym1lbnUgdHJpZ2dlciAoaW4gdGhhdCBjYXNlLCBjb2xvciBzaG91bGQgbm90IGJlIGluaGVyaXRlZClcblx0ICovXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICkgKjpub3QoJHsgUG9wb3ZlcklubmVyV3JhcHBlciB9KSAmLFxuXHQvKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGRpc2FibGVkICovXG5cdFthcmlhLWRpc2FibGVkPSd0cnVlJ10gKjpub3QoJHsgUG9wb3ZlcklubmVyV3JhcHBlciB9KSAmIHtcblx0XHRjb2xvcjogaW5oZXJpdDtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IEdyb3VwID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVHcm91cCApYFxuXHQvKiBJZ25vcmUgdGhpcyBlbGVtZW50IHdoZW4gY2FsY3VsYXRpbmcgdGhlIGxheW91dC4gVXNlZnVsIGZvciBzdWJncmlkICovXG5cdGRpc3BsYXk6IGNvbnRlbnRzO1xuYDtcblxuZXhwb3J0IGNvbnN0IEdyb3VwTGFiZWwgPSBzdHlsZWQoIEFyaWFraXQuTWVudUdyb3VwTGFiZWwgKWBcblx0LyogT2NjdXB5IHRoZSB3aWR0aCBvZiBhbGwgZ3JpZCBjb2x1bW5zIChpZS4gZnVsbCB3aWR0aCkgKi9cblx0Z3JpZC1jb2x1bW46IDEgLyAtMTtcblxuXHRwYWRkaW5nLWJsb2NrLXN0YXJ0OiAkeyBzcGFjZSggMyApIH07XG5cdHBhZGRpbmctYmxvY2stZW5kOiAkeyBzcGFjZSggMiApIH07XG5cdHBhZGRpbmctaW5saW5lOiAkeyBJVEVNX1BBRERJTkdfSU5MSU5FIH07XG5gO1xuXG5leHBvcnQgY29uc3QgU2VwYXJhdG9yID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVTZXBhcmF0b3IgKTxcblx0UGljazwgQ29udGV4dFByb3BzLCAndmFyaWFudCcgPlxuPmBcblx0LyogT2NjdXB5IHRoZSB3aWR0aCBvZiBhbGwgZ3JpZCBjb2x1bW5zIChpZS4gZnVsbCB3aWR0aCkgKi9cblx0Z3JpZC1jb2x1bW46IDEgLyAtMTtcblxuXHRib3JkZXI6IG5vbmU7XG5cdGhlaWdodDogJHsgQ09ORklHLmJvcmRlcldpZHRoIH07XG5cdGJhY2tncm91bmQtY29sb3I6ICR7ICggcHJvcHMgKSA9PlxuXHRcdHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xuXHRcdFx0PyBUT09MQkFSX1ZBUklBTlRfQk9SREVSX0NPTE9SXG5cdFx0XHQ6IERJVklERVJfQ09MT1IgfTtcblx0LyogQWxpZ24gd2l0aCBtZW51IGl0ZW1zJyBjb250ZW50ICovXG5cdG1hcmdpbi1ibG9jazogJHsgc3BhY2UoIDIgKSB9O1xuXHRtYXJnaW4taW5saW5lOiAkeyBJVEVNX1BBRERJTkdfSU5MSU5FIH07XG5cblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdWJtZW51Q2hldnJvbkljb24gPSBzdHlsZWQoIEljb24gKWBcblx0d2lkdGg6ICR7IHNwYWNlKCAxLjUgKSB9O1xuXHQkeyBydGwoXG5cdFx0e1xuXHRcdFx0dHJhbnNmb3JtOiBgc2NhbGVYKDEpYCxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRyYW5zZm9ybTogYHNjYWxlWCgtMSlgLFxuXHRcdH1cblx0KSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IEl0ZW1MYWJlbCA9IHN0eWxlZCggVHJ1bmNhdGUgKWBcblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xuXHRsaW5lLWhlaWdodDogMjBweDtcblx0Y29sb3I6IGluaGVyaXQ7XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbUhlbHBUZXh0ID0gc3R5bGVkKCBUcnVuY2F0ZSApYFxuXHRmb250LXNpemU6ICR7IGZvbnQoICdoZWxwVGV4dC5mb250U2l6ZScgKSB9O1xuXHRsaW5lLWhlaWdodDogMTZweDtcblx0Y29sb3I6ICR7IExJR0hURVJfVEVYVF9DT0xPUiB9O1xuXHRvdmVyZmxvdy13cmFwOiBhbnl3aGVyZTtcblxuXHRbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApXG5cdFx0Kjpub3QoICR7IFBvcG92ZXJJbm5lcldyYXBwZXIgfSApXG5cdFx0Jixcblx0W2FyaWEtZGlzYWJsZWQ9J3RydWUnXSAqOm5vdCggJHsgUG9wb3ZlcklubmVyV3JhcHBlciB9ICkgJiB7XG5cdFx0Y29sb3I6IGluaGVyaXQ7XG5cdH1cbmA7XG4iXX0= */"));
const baseItem = /* @__PURE__ */ (0, import_react.css)("all:unset;position:relative;min-height:", (0, import_space.space)(10), ";box-sizing:border-box;grid-column:1/-1;display:grid;grid-template-columns:", GRID_TEMPLATE_COLS, ";align-items:center;@supports ( grid-template-columns: subgrid ){grid-template-columns:subgrid;}font-size:", (0, import_utils.font)("default.fontSize"), ";font-family:inherit;font-weight:normal;line-height:20px;color:", import_utils.COLORS.theme.foreground, ";border-radius:", import_utils.CONFIG.radiusSmall, ";padding-block:", ITEM_PADDING_BLOCK, ";padding-inline:", ITEM_PADDING_INLINE, ";scroll-margin:", CONTENT_WRAPPER_PADDING, ";user-select:none;outline:none;&[aria-disabled='true']{color:", import_utils.COLORS.ui.textDisabled, ";cursor:not-allowed;}&[data-active-item]:not( [data-focus-visible] ):not(\n			[aria-disabled='true']\n		){background-color:", import_utils.COLORS.theme.accent, ";color:", import_utils.COLORS.theme.accentInverted, ";}&[data-focus-visible]{box-shadow:0 0 0 1.5px ", import_utils.COLORS.theme.accent, ";outline:2px solid transparent;}&:active,&[data-active]{}", PopoverInnerWrapper, ':not(:focus) &:not(:focus)[aria-expanded="true"]{background-color:', LIGHT_BACKGROUND_COLOR, ";color:", import_utils.COLORS.theme.foreground, ";}svg{fill:currentColor;}" + (process.env.NODE_ENV === "production" ? "" : ";label:baseItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const Item = /* @__PURE__ */ (0, import_base.default)(Ariakit.MenuItem, process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti12"
} : {
  target: "e1wg7tti12",
  label: "Item"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CheckboxItem = /* @__PURE__ */ (0, import_base.default)(Ariakit.MenuItemCheckbox, process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti11"
} : {
  target: "e1wg7tti11",
  label: "CheckboxItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const RadioItem = /* @__PURE__ */ (0, import_base.default)(Ariakit.MenuItemRadio, process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti10"
} : {
  target: "e1wg7tti10",
  label: "RadioItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ItemPrefixWrapper = /* @__PURE__ */ (0, import_base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti9"
} : {
  target: "e1wg7tti9",
  label: "ItemPrefixWrapper"
})("grid-column:1;", CheckboxItem, ">&,", RadioItem, ">&{min-width:", (0, import_space.space)(6), ";}", CheckboxItem, ">&,", RadioItem, ">&,&:not( :empty ){margin-inline-end:", (0, import_space.space)(2), ";}display:flex;align-items:center;justify-content:center;color:", LIGHTER_TEXT_COLOR, ";[data-active-item]:not( [data-focus-visible] )>&,[aria-disabled='true']>&{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ItemContentWrapper = /* @__PURE__ */ (0, import_base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti8"
} : {
  target: "e1wg7tti8",
  label: "ItemContentWrapper"
})("grid-column:2;display:flex;align-items:center;justify-content:space-between;gap:", (0, import_space.space)(3), ";pointer-events:none;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ItemChildrenWrapper = /* @__PURE__ */ (0, import_base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti7"
} : {
  target: "e1wg7tti7",
  label: "ItemChildrenWrapper"
})("flex:1;display:inline-flex;flex-direction:column;gap:", (0, import_space.space)(1), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ItemSuffixWrapper = /* @__PURE__ */ (0, import_base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti6"
} : {
  target: "e1wg7tti6",
  label: "ItemSuffixWrapper"
})("flex:0 1 fit-content;min-width:0;width:fit-content;display:flex;align-items:center;justify-content:center;gap:", (0, import_space.space)(3), ";color:", LIGHTER_TEXT_COLOR, ";[data-active-item]:not( [data-focus-visible] ) *:not(", PopoverInnerWrapper, ") &,[aria-disabled='true'] *:not(", PopoverInnerWrapper, ") &{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Group = /* @__PURE__ */ (0, import_base.default)(Ariakit.MenuGroup, process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti5"
} : {
  target: "e1wg7tti5",
  label: "Group"
})(process.env.NODE_ENV === "production" ? {
  name: "49aokf",
  styles: "display:contents"
} : {
  name: "49aokf",
  styles: "display:contents",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const GroupLabel = /* @__PURE__ */ (0, import_base.default)(Ariakit.MenuGroupLabel, process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti4"
} : {
  target: "e1wg7tti4",
  label: "GroupLabel"
})("grid-column:1/-1;padding-block-start:", (0, import_space.space)(3), ";padding-block-end:", (0, import_space.space)(2), ";padding-inline:", ITEM_PADDING_INLINE, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Separator = /* @__PURE__ */ (0, import_base.default)(Ariakit.MenuSeparator, process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti3"
} : {
  target: "e1wg7tti3",
  label: "Separator"
})("grid-column:1/-1;border:none;height:", import_utils.CONFIG.borderWidth, ";background-color:", (props) => props.variant === "toolbar" ? TOOLBAR_VARIANT_BORDER_COLOR : DIVIDER_COLOR, ";margin-block:", (0, import_space.space)(2), ";margin-inline:", ITEM_PADDING_INLINE, ";outline:2px solid transparent;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SubmenuChevronIcon = /* @__PURE__ */ (0, import_base.default)(import_icon.default, process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti2"
} : {
  target: "e1wg7tti2",
  label: "SubmenuChevronIcon"
})("width:", (0, import_space.space)(1.5), ";", (0, import_utils.rtl)({
  transform: `scaleX(1)`
}, {
  transform: `scaleX(-1)`
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ItemLabel = /* @__PURE__ */ (0, import_base.default)(import_truncate.Truncate, process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti1"
} : {
  target: "e1wg7tti1",
  label: "ItemLabel"
})("font-size:", (0, import_utils.font)("default.fontSize"), ";line-height:20px;color:inherit;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ItemHelpText = /* @__PURE__ */ (0, import_base.default)(import_truncate.Truncate, process.env.NODE_ENV === "production" ? {
  target: "e1wg7tti0"
} : {
  target: "e1wg7tti0",
  label: "ItemHelpText"
})("font-size:", (0, import_utils.font)("helpText.fontSize"), ";line-height:16px;color:", LIGHTER_TEXT_COLOR, ";overflow-wrap:anywhere;[data-active-item]:not( [data-focus-visible] ) *:not( ", PopoverInnerWrapper, " ) &,[aria-disabled='true'] *:not( ", PopoverInnerWrapper, " ) &{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CheckboxItem,
  Group,
  GroupLabel,
  Item,
  ItemChildrenWrapper,
  ItemContentWrapper,
  ItemHelpText,
  ItemLabel,
  ItemPrefixWrapper,
  ItemSuffixWrapper,
  PopoverInnerWrapper,
  PopoverOuterWrapper,
  RadioItem,
  Separator,
  SubmenuChevronIcon
});
//# sourceMappingURL=styles.js.map
