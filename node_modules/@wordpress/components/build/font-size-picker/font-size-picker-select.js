"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var font_size_picker_select_exports = {};
__export(font_size_picker_select_exports, {
  default: () => font_size_picker_select_default
});
module.exports = __toCommonJS(font_size_picker_select_exports);
var import_i18n = require("@wordpress/i18n");
var import_custom_select_control = __toESM(require("../custom-select-control"));
var import_utils = require("./utils");
var import_jsx_runtime = require("react/jsx-runtime");
const DEFAULT_OPTION = {
  key: "default",
  name: (0, import_i18n.__)("Default"),
  value: void 0
};
const FontSizePickerSelect = (props) => {
  var _options$find;
  const {
    __next40pxDefaultSize,
    fontSizes,
    value,
    size,
    onChange
  } = props;
  const options = [DEFAULT_OPTION, ...fontSizes.map((fontSize) => {
    let hint;
    if ((0, import_utils.isSimpleCssValue)(fontSize.size)) {
      hint = String(fontSize.size);
    }
    return {
      key: fontSize.slug,
      name: fontSize.name || fontSize.slug,
      value: fontSize.size,
      hint
    };
  })];
  const selectedOption = (_options$find = options.find((option) => option.value === value)) !== null && _options$find !== void 0 ? _options$find : DEFAULT_OPTION;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_custom_select_control.default, {
    __next40pxDefaultSize,
    __shouldNotWarnDeprecated36pxSize: true,
    className: "components-font-size-picker__select",
    label: (0, import_i18n.__)("Font size"),
    hideLabelFromVision: true,
    describedBy: (0, import_i18n.sprintf)(
      // translators: %s: Currently selected font size.
      (0, import_i18n.__)("Currently selected font size: %s"),
      selectedOption.name
    ),
    options,
    value: selectedOption,
    showSelectedHint: true,
    onChange: ({
      selectedItem
    }) => {
      onChange(selectedItem.value);
    },
    size
  });
};
var font_size_picker_select_default = FontSizePickerSelect;
//# sourceMappingURL=font-size-picker-select.js.map
