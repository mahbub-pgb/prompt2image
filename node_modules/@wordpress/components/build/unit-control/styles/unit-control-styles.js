"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var unit_control_styles_exports = {};
__export(unit_control_styles_exports, {
  UnitLabel: () => UnitLabel,
  UnitSelect: () => UnitSelect,
  ValueInput: () => ValueInput
});
module.exports = __toCommonJS(unit_control_styles_exports);
var import_base = __toESM(require("@emotion/styled/base"));
var import_react = require("@emotion/react");
var import_utils = require("../../utils");
var import_number_control = __toESM(require("../../number-control"));
var import_input_control_styles = require("../../input-control/styles/input-control-styles");
var import_space = require("../../utils/space");
const ValueInput = /* @__PURE__ */ (0, import_base.default)(import_number_control.default, process.env.NODE_ENV === "production" ? {
  target: "e1bagdl32"
} : {
  target: "e1bagdl32",
  label: "ValueInput"
})("&&&{input{display:block;width:100%;}", import_input_control_styles.BackdropUI, "{transition:box-shadow 0.1s linear;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaXQtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUJpRCIsImZpbGUiOiJ1bml0LWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBDT05GSUcsIHJ0bCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCBOdW1iZXJDb250cm9sIGZyb20gJy4uLy4uL251bWJlci1jb250cm9sJztcbmltcG9ydCB7IEJhY2tkcm9wVUkgfSBmcm9tICcuLi8uLi9pbnB1dC1jb250cm9sL3N0eWxlcy9pbnB1dC1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQgdHlwZSB7IFNlbGVjdFNpemUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NwYWNlJztcblxuLy8gVXNpbmcgYHNlbGVjdFNpemVgIGluc3RlYWQgb2YgYHNpemVgIHRvIGF2b2lkIGEgdHlwZSBjb25mbGljdCB3aXRoIHRoZVxuLy8gYHNpemVgIEhUTUwgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBlbGVtZW50LlxudHlwZSBTZWxlY3RQcm9wcyA9IHtcblx0c2VsZWN0U2l6ZTogU2VsZWN0U2l6ZTtcbn07XG5cbi8vIFRPRE86IFJlc29sdmUgbmVlZCB0byB1c2UgJiYmIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzL2d1dGVuYmVyZy9pc3N1ZXMvMTg0ODNcblxuZXhwb3J0IGNvbnN0IFZhbHVlSW5wdXQgPSBzdHlsZWQoIE51bWJlckNvbnRyb2wgKWBcblx0JiYmIHtcblx0XHRpbnB1dCB7XG5cdFx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdH1cblxuXHRcdCR7IEJhY2tkcm9wVUkgfSB7XG5cdFx0XHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuMXMgbGluZWFyO1xuXHRcdH1cblx0fVxuYDtcblxuY29uc3QgYmFzZVVuaXRMYWJlbFN0eWxlcyA9ICggeyBzZWxlY3RTaXplIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRjb25zdCBzaXplcyA9IHtcblx0XHRzbWFsbDogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdHBhZGRpbmc6IDJweCAxcHg7XG5cdFx0XHR3aWR0aDogMjBweDtcblx0XHRcdGZvbnQtc2l6ZTogOHB4O1xuXHRcdFx0bGluZS1oZWlnaHQ6IDE7XG5cdFx0XHRsZXR0ZXItc3BhY2luZzogLTAuNXB4O1xuXHRcdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXG5cdFx0XHQmOm5vdCggOmRpc2FibGVkICkge1xuXHRcdFx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDgwMCBdIH07XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRkZWZhdWx0OiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdFx0bWF4LXdpZHRoOiA0OHB4O1xuXHRcdFx0aGVpZ2h0OiAyNHB4O1xuXHRcdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcblx0XHRcdHBhZGRpbmc6ICR7IHNwYWNlKCAxICkgfTtcblxuXHRcdFx0Zm9udC1zaXplOiAxM3B4O1xuXHRcdFx0bGluZS1oZWlnaHQ6IDE7XG5cdFx0XHR0ZXh0LWFsaWduLWxhc3Q6IGNlbnRlcjtcblx0XHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdFx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdFx0XHRmaWVsZC1zaXppbmc6IGNvbnRlbnQ7XG5cblx0XHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdFx0XHR9XG5cdFx0YCxcblx0fTtcblxuXHRyZXR1cm4gc2l6ZXNbIHNlbGVjdFNpemUgXTtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0TGFiZWwgPSBzdHlsZWQuZGl2PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHR9XG5gO1xuXG5jb25zdCB1bml0U2VsZWN0U2l6ZXMgPSAoIHsgc2VsZWN0U2l6ZSA9ICdkZWZhdWx0JyB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0c21hbGw6IGNzc2Bcblx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdFx0dHJhbnNpdGlvbjpcblx0XHRcdFx0Ym94LXNoYWRvdyAwLjFzIGxpbmVhcixcblx0XHRcdFx0Ym9yZGVyIDAuMXMgbGluZWFyO1xuXG5cdFx0XHQkeyBydGwoIHsgYm9yZGVyVG9wTGVmdFJhZGl1czogMCwgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCB9ICkoKSB9XG5cblx0XHRcdCY6bm90KDpkaXNhYmxlZCk6aG92ZXIge1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgMTAwIF0gfTtcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJvcmRlcjogMXB4IHNvbGlkICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRib3gtc2hhZG93OiBpbnNldCAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aCArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lLW9mZnNldDogMDtcblx0XHRcdFx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdFx0XHR6LWluZGV4OiAxO1xuXHRcdFx0fVxuXHRcdGAsXG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRcdFx0Jjp3aGVyZSggOm5vdCggOmRpc2FibGVkICkgKTpob3ZlciB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmU6ICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9IHNvbGlkIHRyYW5zcGFyZW50OyAvLyBGb3IgSGlnaCBDb250cmFzdCBNb2RlXG5cdFx0XHR9XG5cblx0XHRcdCY6Zm9jdXMge1xuXHRcdFx0XHRib3gtc2hhZG93OiAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aEZvY3VzICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmU6ICR7IENPTkZJRy5ib3JkZXJXaWR0aEZvY3VzIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzaXplc1sgc2VsZWN0U2l6ZSBdO1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQvLyBUaGUgJiYmIGNvdW50ZXJhY3RzIDxzZWxlY3Q+IHN0eWxlcyBpbiBXUCBmb3Jtcy5jc3Ncblx0JiYmIHtcblx0XHRhcHBlYXJhbmNlOiBub25lO1xuXHRcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNYU21hbGwgfTtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0XHQvKiBSZW1vdmluZyBtYXJnaW4gZW5zdXJlcyBmb2N1cyBzdHlsZXMgbmVhdGx5IG92ZXJsYXkgdGhlIHdyYXBwZXIuICovXG5cdFx0bWFyZ2luOiAwO1xuXHRcdG1pbi1oZWlnaHQ6IGF1dG87XG5cdFx0Zm9udC1mYW1pbHk6IGluaGVyaXQ7XG5cblx0XHQmOm5vdCggOmRpc2FibGVkICkge1xuXHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdH1cblxuXHRcdCR7IGJhc2VVbml0TGFiZWxTdHlsZXMgfTtcblx0XHQkeyB1bml0U2VsZWN0U2l6ZXMgfTtcblx0fVxuYDtcbiJdfQ== */"));
const baseUnitLabelStyles = ({
  selectSize
}) => {
  const sizes = {
    small: /* @__PURE__ */ (0, import_react.css)("box-sizing:border-box;padding:2px 1px;width:20px;font-size:8px;line-height:1;letter-spacing:-0.5px;text-transform:uppercase;text-align-last:center;&:not( :disabled ){color:", import_utils.COLORS.gray[800], ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:small;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaXQtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0NZIiwiZmlsZSI6InVuaXQtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IE51bWJlckNvbnRyb2wgZnJvbSAnLi4vLi4vbnVtYmVyLWNvbnRyb2wnO1xuaW1wb3J0IHsgQmFja2Ryb3BVSSB9IGZyb20gJy4uLy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB0eXBlIHsgU2VsZWN0U2l6ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuXG4vLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG4vLyBgc2l6ZWAgSFRNTCBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG50eXBlIFNlbGVjdFByb3BzID0ge1xuXHRzZWxlY3RTaXplOiBTZWxlY3RTaXplO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgVmFsdWVJbnB1dCA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxuXHQmJiYge1xuXHRcdGlucHV0IHtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0fVxuXG5cdFx0JHsgQmFja2Ryb3BVSSB9IHtcblx0XHRcdHRyYW5zaXRpb246IGJveC1zaGFkb3cgMC4xcyBsaW5lYXI7XG5cdFx0fVxuXHR9XG5gO1xuXG5jb25zdCBiYXNlVW5pdExhYmVsU3R5bGVzID0gKCB7IHNlbGVjdFNpemUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdHNtYWxsOiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0cGFkZGluZzogMnB4IDFweDtcblx0XHRcdHdpZHRoOiAyMHB4O1xuXHRcdFx0Zm9udC1zaXplOiA4cHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdGxldHRlci1zcGFjaW5nOiAtMC41cHg7XG5cdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cblx0XHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgODAwIF0gfTtcblx0XHRcdH1cblx0XHRgLFxuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0XHRtaW4td2lkdGg6IDI0cHg7XG5cdFx0XHRtYXgtd2lkdGg6IDQ4cHg7XG5cdFx0XHRoZWlnaHQ6IDI0cHg7XG5cdFx0XHRtYXJnaW4taW5saW5lLWVuZDogJHsgc3BhY2UoIDIgKSB9O1xuXHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIDEgKSB9O1xuXG5cdFx0XHRmb250LXNpemU6IDEzcHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXHRcdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblx0XHRcdGZpZWxkLXNpemluZzogY29udGVudDtcblxuXHRcdFx0Jjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdFx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0XHRcdH1cblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzaXplc1sgc2VsZWN0U2l6ZSBdO1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRMYWJlbCA9IHN0eWxlZC5kaXY8IFNlbGVjdFByb3BzID5gXG5cdCYmJiB7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cblx0XHQkeyBiYXNlVW5pdExhYmVsU3R5bGVzIH07XG5cblx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDkwMCBdIH07XG5cdH1cbmA7XG5cbmNvbnN0IHVuaXRTZWxlY3RTaXplcyA9ICggeyBzZWxlY3RTaXplID0gJ2RlZmF1bHQnIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRjb25zdCBzaXplcyA9IHtcblx0XHRzbWFsbDogY3NzYFxuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHR0cmFuc2l0aW9uOlxuXHRcdFx0XHRib3gtc2hhZG93IDAuMXMgbGluZWFyLFxuXHRcdFx0XHRib3JkZXIgMC4xcyBsaW5lYXI7XG5cblx0XHRcdCR7IHJ0bCggeyBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwLCBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwIH0gKSgpIH1cblxuXHRcdFx0Jjpub3QoOmRpc2FibGVkKTpob3ZlciB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5ncmF5WyAxMDAgXSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym9yZGVyOiAxcHggc29saWQgJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdGJveC1zaGFkb3c6IGluc2V0IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmUtb2Zmc2V0OiAwO1xuXHRcdFx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHRcdHotaW5kZXg6IDE7XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRkZWZhdWx0OiBjc3NgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXG5cdFx0XHQmOndoZXJlKCA6bm90KCA6ZGlzYWJsZWQgKSApOmhvdmVyIHtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNpemVzWyBzZWxlY3RTaXplIF07XG59O1xuXG5leHBvcnQgY29uc3QgVW5pdFNlbGVjdCA9IHN0eWxlZC5zZWxlY3Q8IFNlbGVjdFByb3BzID5gXG5cdC8vIFRoZSAmJiYgY291bnRlcmFjdHMgPHNlbGVjdD4gc3R5bGVzIGluIFdQIGZvcm1zLmNzc1xuXHQmJiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1hTbWFsbCB9O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdC8qIFJlbW92aW5nIG1hcmdpbiBlbnN1cmVzIGZvY3VzIHN0eWxlcyBuZWF0bHkgb3ZlcmxheSB0aGUgd3JhcHBlci4gKi9cblx0XHRtYXJnaW46IDA7XG5cdFx0bWluLWhlaWdodDogYXV0bztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblxuXHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0fVxuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXHRcdCR7IHVuaXRTZWxlY3RTaXplcyB9O1xuXHR9XG5gO1xuIl19 */"),
    default: /* @__PURE__ */ (0, import_react.css)("box-sizing:border-box;min-width:24px;max-width:48px;height:24px;margin-inline-end:", (0, import_space.space)(2), ";padding:", (0, import_space.space)(1), ";font-size:13px;line-height:1;text-align-last:center;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;field-sizing:content;&:not( :disabled ){color:", import_utils.COLORS.theme.accent, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:default;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaXQtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0RjIiwiZmlsZSI6InVuaXQtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IE51bWJlckNvbnRyb2wgZnJvbSAnLi4vLi4vbnVtYmVyLWNvbnRyb2wnO1xuaW1wb3J0IHsgQmFja2Ryb3BVSSB9IGZyb20gJy4uLy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB0eXBlIHsgU2VsZWN0U2l6ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuXG4vLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG4vLyBgc2l6ZWAgSFRNTCBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG50eXBlIFNlbGVjdFByb3BzID0ge1xuXHRzZWxlY3RTaXplOiBTZWxlY3RTaXplO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgVmFsdWVJbnB1dCA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxuXHQmJiYge1xuXHRcdGlucHV0IHtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0fVxuXG5cdFx0JHsgQmFja2Ryb3BVSSB9IHtcblx0XHRcdHRyYW5zaXRpb246IGJveC1zaGFkb3cgMC4xcyBsaW5lYXI7XG5cdFx0fVxuXHR9XG5gO1xuXG5jb25zdCBiYXNlVW5pdExhYmVsU3R5bGVzID0gKCB7IHNlbGVjdFNpemUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdHNtYWxsOiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0cGFkZGluZzogMnB4IDFweDtcblx0XHRcdHdpZHRoOiAyMHB4O1xuXHRcdFx0Zm9udC1zaXplOiA4cHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdGxldHRlci1zcGFjaW5nOiAtMC41cHg7XG5cdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cblx0XHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgODAwIF0gfTtcblx0XHRcdH1cblx0XHRgLFxuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0XHRtaW4td2lkdGg6IDI0cHg7XG5cdFx0XHRtYXgtd2lkdGg6IDQ4cHg7XG5cdFx0XHRoZWlnaHQ6IDI0cHg7XG5cdFx0XHRtYXJnaW4taW5saW5lLWVuZDogJHsgc3BhY2UoIDIgKSB9O1xuXHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIDEgKSB9O1xuXG5cdFx0XHRmb250LXNpemU6IDEzcHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXHRcdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblx0XHRcdGZpZWxkLXNpemluZzogY29udGVudDtcblxuXHRcdFx0Jjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdFx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0XHRcdH1cblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzaXplc1sgc2VsZWN0U2l6ZSBdO1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRMYWJlbCA9IHN0eWxlZC5kaXY8IFNlbGVjdFByb3BzID5gXG5cdCYmJiB7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cblx0XHQkeyBiYXNlVW5pdExhYmVsU3R5bGVzIH07XG5cblx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDkwMCBdIH07XG5cdH1cbmA7XG5cbmNvbnN0IHVuaXRTZWxlY3RTaXplcyA9ICggeyBzZWxlY3RTaXplID0gJ2RlZmF1bHQnIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRjb25zdCBzaXplcyA9IHtcblx0XHRzbWFsbDogY3NzYFxuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHR0cmFuc2l0aW9uOlxuXHRcdFx0XHRib3gtc2hhZG93IDAuMXMgbGluZWFyLFxuXHRcdFx0XHRib3JkZXIgMC4xcyBsaW5lYXI7XG5cblx0XHRcdCR7IHJ0bCggeyBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwLCBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwIH0gKSgpIH1cblxuXHRcdFx0Jjpub3QoOmRpc2FibGVkKTpob3ZlciB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5ncmF5WyAxMDAgXSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym9yZGVyOiAxcHggc29saWQgJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdGJveC1zaGFkb3c6IGluc2V0IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmUtb2Zmc2V0OiAwO1xuXHRcdFx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHRcdHotaW5kZXg6IDE7XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRkZWZhdWx0OiBjc3NgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXG5cdFx0XHQmOndoZXJlKCA6bm90KCA6ZGlzYWJsZWQgKSApOmhvdmVyIHtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNpemVzWyBzZWxlY3RTaXplIF07XG59O1xuXG5leHBvcnQgY29uc3QgVW5pdFNlbGVjdCA9IHN0eWxlZC5zZWxlY3Q8IFNlbGVjdFByb3BzID5gXG5cdC8vIFRoZSAmJiYgY291bnRlcmFjdHMgPHNlbGVjdD4gc3R5bGVzIGluIFdQIGZvcm1zLmNzc1xuXHQmJiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1hTbWFsbCB9O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdC8qIFJlbW92aW5nIG1hcmdpbiBlbnN1cmVzIGZvY3VzIHN0eWxlcyBuZWF0bHkgb3ZlcmxheSB0aGUgd3JhcHBlci4gKi9cblx0XHRtYXJnaW46IDA7XG5cdFx0bWluLWhlaWdodDogYXV0bztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblxuXHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0fVxuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXHRcdCR7IHVuaXRTZWxlY3RTaXplcyB9O1xuXHR9XG5gO1xuIl19 */")
  };
  return sizes[selectSize];
};
const UnitLabel = /* @__PURE__ */ (0, import_base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1bagdl31"
} : {
  target: "e1bagdl31",
  label: "UnitLabel"
})("&&&{pointer-events:none;", baseUnitLabelStyles, ";color:", import_utils.COLORS.gray[900], ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaXQtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkVrRCIsImZpbGUiOiJ1bml0LWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBDT05GSUcsIHJ0bCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCBOdW1iZXJDb250cm9sIGZyb20gJy4uLy4uL251bWJlci1jb250cm9sJztcbmltcG9ydCB7IEJhY2tkcm9wVUkgfSBmcm9tICcuLi8uLi9pbnB1dC1jb250cm9sL3N0eWxlcy9pbnB1dC1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQgdHlwZSB7IFNlbGVjdFNpemUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NwYWNlJztcblxuLy8gVXNpbmcgYHNlbGVjdFNpemVgIGluc3RlYWQgb2YgYHNpemVgIHRvIGF2b2lkIGEgdHlwZSBjb25mbGljdCB3aXRoIHRoZVxuLy8gYHNpemVgIEhUTUwgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBlbGVtZW50LlxudHlwZSBTZWxlY3RQcm9wcyA9IHtcblx0c2VsZWN0U2l6ZTogU2VsZWN0U2l6ZTtcbn07XG5cbi8vIFRPRE86IFJlc29sdmUgbmVlZCB0byB1c2UgJiYmIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzL2d1dGVuYmVyZy9pc3N1ZXMvMTg0ODNcblxuZXhwb3J0IGNvbnN0IFZhbHVlSW5wdXQgPSBzdHlsZWQoIE51bWJlckNvbnRyb2wgKWBcblx0JiYmIHtcblx0XHRpbnB1dCB7XG5cdFx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdH1cblxuXHRcdCR7IEJhY2tkcm9wVUkgfSB7XG5cdFx0XHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuMXMgbGluZWFyO1xuXHRcdH1cblx0fVxuYDtcblxuY29uc3QgYmFzZVVuaXRMYWJlbFN0eWxlcyA9ICggeyBzZWxlY3RTaXplIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRjb25zdCBzaXplcyA9IHtcblx0XHRzbWFsbDogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdHBhZGRpbmc6IDJweCAxcHg7XG5cdFx0XHR3aWR0aDogMjBweDtcblx0XHRcdGZvbnQtc2l6ZTogOHB4O1xuXHRcdFx0bGluZS1oZWlnaHQ6IDE7XG5cdFx0XHRsZXR0ZXItc3BhY2luZzogLTAuNXB4O1xuXHRcdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXG5cdFx0XHQmOm5vdCggOmRpc2FibGVkICkge1xuXHRcdFx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDgwMCBdIH07XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRkZWZhdWx0OiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdFx0bWF4LXdpZHRoOiA0OHB4O1xuXHRcdFx0aGVpZ2h0OiAyNHB4O1xuXHRcdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcblx0XHRcdHBhZGRpbmc6ICR7IHNwYWNlKCAxICkgfTtcblxuXHRcdFx0Zm9udC1zaXplOiAxM3B4O1xuXHRcdFx0bGluZS1oZWlnaHQ6IDE7XG5cdFx0XHR0ZXh0LWFsaWduLWxhc3Q6IGNlbnRlcjtcblx0XHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdFx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdFx0XHRmaWVsZC1zaXppbmc6IGNvbnRlbnQ7XG5cblx0XHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdFx0XHR9XG5cdFx0YCxcblx0fTtcblxuXHRyZXR1cm4gc2l6ZXNbIHNlbGVjdFNpemUgXTtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0TGFiZWwgPSBzdHlsZWQuZGl2PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHR9XG5gO1xuXG5jb25zdCB1bml0U2VsZWN0U2l6ZXMgPSAoIHsgc2VsZWN0U2l6ZSA9ICdkZWZhdWx0JyB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0c21hbGw6IGNzc2Bcblx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdFx0dHJhbnNpdGlvbjpcblx0XHRcdFx0Ym94LXNoYWRvdyAwLjFzIGxpbmVhcixcblx0XHRcdFx0Ym9yZGVyIDAuMXMgbGluZWFyO1xuXG5cdFx0XHQkeyBydGwoIHsgYm9yZGVyVG9wTGVmdFJhZGl1czogMCwgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCB9ICkoKSB9XG5cblx0XHRcdCY6bm90KDpkaXNhYmxlZCk6aG92ZXIge1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgMTAwIF0gfTtcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJvcmRlcjogMXB4IHNvbGlkICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRib3gtc2hhZG93OiBpbnNldCAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aCArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lLW9mZnNldDogMDtcblx0XHRcdFx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdFx0XHR6LWluZGV4OiAxO1xuXHRcdFx0fVxuXHRcdGAsXG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRcdFx0Jjp3aGVyZSggOm5vdCggOmRpc2FibGVkICkgKTpob3ZlciB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmU6ICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9IHNvbGlkIHRyYW5zcGFyZW50OyAvLyBGb3IgSGlnaCBDb250cmFzdCBNb2RlXG5cdFx0XHR9XG5cblx0XHRcdCY6Zm9jdXMge1xuXHRcdFx0XHRib3gtc2hhZG93OiAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aEZvY3VzICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmU6ICR7IENPTkZJRy5ib3JkZXJXaWR0aEZvY3VzIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzaXplc1sgc2VsZWN0U2l6ZSBdO1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQvLyBUaGUgJiYmIGNvdW50ZXJhY3RzIDxzZWxlY3Q+IHN0eWxlcyBpbiBXUCBmb3Jtcy5jc3Ncblx0JiYmIHtcblx0XHRhcHBlYXJhbmNlOiBub25lO1xuXHRcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNYU21hbGwgfTtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0XHQvKiBSZW1vdmluZyBtYXJnaW4gZW5zdXJlcyBmb2N1cyBzdHlsZXMgbmVhdGx5IG92ZXJsYXkgdGhlIHdyYXBwZXIuICovXG5cdFx0bWFyZ2luOiAwO1xuXHRcdG1pbi1oZWlnaHQ6IGF1dG87XG5cdFx0Zm9udC1mYW1pbHk6IGluaGVyaXQ7XG5cblx0XHQmOm5vdCggOmRpc2FibGVkICkge1xuXHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdH1cblxuXHRcdCR7IGJhc2VVbml0TGFiZWxTdHlsZXMgfTtcblx0XHQkeyB1bml0U2VsZWN0U2l6ZXMgfTtcblx0fVxuYDtcbiJdfQ== */"));
const unitSelectSizes = ({
  selectSize = "default"
}) => {
  const sizes = {
    small: /* @__PURE__ */ (0, import_react.css)("height:100%;border:1px solid transparent;transition:box-shadow 0.1s linear,border 0.1s linear;", (0, import_utils.rtl)({
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    })(), " &:not(:disabled):hover{background-color:", import_utils.COLORS.gray[100], ";}&:focus{border:1px solid ", import_utils.COLORS.ui.borderFocus, ";box-shadow:inset 0 0 0 ", import_utils.CONFIG.borderWidth + " " + import_utils.COLORS.ui.borderFocus, ";outline-offset:0;outline:2px solid transparent;z-index:1;}" + (process.env.NODE_ENV === "production" ? "" : ";label:small;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaXQtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUZZIiwiZmlsZSI6InVuaXQtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IE51bWJlckNvbnRyb2wgZnJvbSAnLi4vLi4vbnVtYmVyLWNvbnRyb2wnO1xuaW1wb3J0IHsgQmFja2Ryb3BVSSB9IGZyb20gJy4uLy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB0eXBlIHsgU2VsZWN0U2l6ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuXG4vLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG4vLyBgc2l6ZWAgSFRNTCBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG50eXBlIFNlbGVjdFByb3BzID0ge1xuXHRzZWxlY3RTaXplOiBTZWxlY3RTaXplO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgVmFsdWVJbnB1dCA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxuXHQmJiYge1xuXHRcdGlucHV0IHtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0fVxuXG5cdFx0JHsgQmFja2Ryb3BVSSB9IHtcblx0XHRcdHRyYW5zaXRpb246IGJveC1zaGFkb3cgMC4xcyBsaW5lYXI7XG5cdFx0fVxuXHR9XG5gO1xuXG5jb25zdCBiYXNlVW5pdExhYmVsU3R5bGVzID0gKCB7IHNlbGVjdFNpemUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdHNtYWxsOiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0cGFkZGluZzogMnB4IDFweDtcblx0XHRcdHdpZHRoOiAyMHB4O1xuXHRcdFx0Zm9udC1zaXplOiA4cHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdGxldHRlci1zcGFjaW5nOiAtMC41cHg7XG5cdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cblx0XHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgODAwIF0gfTtcblx0XHRcdH1cblx0XHRgLFxuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0XHRtaW4td2lkdGg6IDI0cHg7XG5cdFx0XHRtYXgtd2lkdGg6IDQ4cHg7XG5cdFx0XHRoZWlnaHQ6IDI0cHg7XG5cdFx0XHRtYXJnaW4taW5saW5lLWVuZDogJHsgc3BhY2UoIDIgKSB9O1xuXHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIDEgKSB9O1xuXG5cdFx0XHRmb250LXNpemU6IDEzcHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXHRcdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblx0XHRcdGZpZWxkLXNpemluZzogY29udGVudDtcblxuXHRcdFx0Jjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdFx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0XHRcdH1cblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzaXplc1sgc2VsZWN0U2l6ZSBdO1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRMYWJlbCA9IHN0eWxlZC5kaXY8IFNlbGVjdFByb3BzID5gXG5cdCYmJiB7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cblx0XHQkeyBiYXNlVW5pdExhYmVsU3R5bGVzIH07XG5cblx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDkwMCBdIH07XG5cdH1cbmA7XG5cbmNvbnN0IHVuaXRTZWxlY3RTaXplcyA9ICggeyBzZWxlY3RTaXplID0gJ2RlZmF1bHQnIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRjb25zdCBzaXplcyA9IHtcblx0XHRzbWFsbDogY3NzYFxuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHR0cmFuc2l0aW9uOlxuXHRcdFx0XHRib3gtc2hhZG93IDAuMXMgbGluZWFyLFxuXHRcdFx0XHRib3JkZXIgMC4xcyBsaW5lYXI7XG5cblx0XHRcdCR7IHJ0bCggeyBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwLCBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwIH0gKSgpIH1cblxuXHRcdFx0Jjpub3QoOmRpc2FibGVkKTpob3ZlciB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5ncmF5WyAxMDAgXSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym9yZGVyOiAxcHggc29saWQgJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdGJveC1zaGFkb3c6IGluc2V0IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmUtb2Zmc2V0OiAwO1xuXHRcdFx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHRcdHotaW5kZXg6IDE7XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRkZWZhdWx0OiBjc3NgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXG5cdFx0XHQmOndoZXJlKCA6bm90KCA6ZGlzYWJsZWQgKSApOmhvdmVyIHtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNpemVzWyBzZWxlY3RTaXplIF07XG59O1xuXG5leHBvcnQgY29uc3QgVW5pdFNlbGVjdCA9IHN0eWxlZC5zZWxlY3Q8IFNlbGVjdFByb3BzID5gXG5cdC8vIFRoZSAmJiYgY291bnRlcmFjdHMgPHNlbGVjdD4gc3R5bGVzIGluIFdQIGZvcm1zLmNzc1xuXHQmJiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1hTbWFsbCB9O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdC8qIFJlbW92aW5nIG1hcmdpbiBlbnN1cmVzIGZvY3VzIHN0eWxlcyBuZWF0bHkgb3ZlcmxheSB0aGUgd3JhcHBlci4gKi9cblx0XHRtYXJnaW46IDA7XG5cdFx0bWluLWhlaWdodDogYXV0bztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblxuXHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0fVxuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXHRcdCR7IHVuaXRTZWxlY3RTaXplcyB9O1xuXHR9XG5gO1xuIl19 */"),
    default: /* @__PURE__ */ (0, import_react.css)("display:flex;justify-content:center;align-items:center;&:where( :not( :disabled ) ):hover{box-shadow:0 0 0 ", import_utils.CONFIG.borderWidth + " " + import_utils.COLORS.ui.borderFocus, ";outline:", import_utils.CONFIG.borderWidth, " solid transparent;}&:focus{box-shadow:0 0 0 ", import_utils.CONFIG.borderWidthFocus + " " + import_utils.COLORS.ui.borderFocus, ";outline:", import_utils.CONFIG.borderWidthFocus, " solid transparent;}" + (process.env.NODE_ENV === "production" ? "" : ";label:default;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaXQtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0djIiwiZmlsZSI6InVuaXQtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IE51bWJlckNvbnRyb2wgZnJvbSAnLi4vLi4vbnVtYmVyLWNvbnRyb2wnO1xuaW1wb3J0IHsgQmFja2Ryb3BVSSB9IGZyb20gJy4uLy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB0eXBlIHsgU2VsZWN0U2l6ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuXG4vLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG4vLyBgc2l6ZWAgSFRNTCBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG50eXBlIFNlbGVjdFByb3BzID0ge1xuXHRzZWxlY3RTaXplOiBTZWxlY3RTaXplO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgVmFsdWVJbnB1dCA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxuXHQmJiYge1xuXHRcdGlucHV0IHtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0fVxuXG5cdFx0JHsgQmFja2Ryb3BVSSB9IHtcblx0XHRcdHRyYW5zaXRpb246IGJveC1zaGFkb3cgMC4xcyBsaW5lYXI7XG5cdFx0fVxuXHR9XG5gO1xuXG5jb25zdCBiYXNlVW5pdExhYmVsU3R5bGVzID0gKCB7IHNlbGVjdFNpemUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdHNtYWxsOiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0cGFkZGluZzogMnB4IDFweDtcblx0XHRcdHdpZHRoOiAyMHB4O1xuXHRcdFx0Zm9udC1zaXplOiA4cHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdGxldHRlci1zcGFjaW5nOiAtMC41cHg7XG5cdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cblx0XHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgODAwIF0gfTtcblx0XHRcdH1cblx0XHRgLFxuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0XHRtaW4td2lkdGg6IDI0cHg7XG5cdFx0XHRtYXgtd2lkdGg6IDQ4cHg7XG5cdFx0XHRoZWlnaHQ6IDI0cHg7XG5cdFx0XHRtYXJnaW4taW5saW5lLWVuZDogJHsgc3BhY2UoIDIgKSB9O1xuXHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIDEgKSB9O1xuXG5cdFx0XHRmb250LXNpemU6IDEzcHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXHRcdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblx0XHRcdGZpZWxkLXNpemluZzogY29udGVudDtcblxuXHRcdFx0Jjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdFx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0XHRcdH1cblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzaXplc1sgc2VsZWN0U2l6ZSBdO1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRMYWJlbCA9IHN0eWxlZC5kaXY8IFNlbGVjdFByb3BzID5gXG5cdCYmJiB7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cblx0XHQkeyBiYXNlVW5pdExhYmVsU3R5bGVzIH07XG5cblx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDkwMCBdIH07XG5cdH1cbmA7XG5cbmNvbnN0IHVuaXRTZWxlY3RTaXplcyA9ICggeyBzZWxlY3RTaXplID0gJ2RlZmF1bHQnIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRjb25zdCBzaXplcyA9IHtcblx0XHRzbWFsbDogY3NzYFxuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHR0cmFuc2l0aW9uOlxuXHRcdFx0XHRib3gtc2hhZG93IDAuMXMgbGluZWFyLFxuXHRcdFx0XHRib3JkZXIgMC4xcyBsaW5lYXI7XG5cblx0XHRcdCR7IHJ0bCggeyBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwLCBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwIH0gKSgpIH1cblxuXHRcdFx0Jjpub3QoOmRpc2FibGVkKTpob3ZlciB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5ncmF5WyAxMDAgXSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym9yZGVyOiAxcHggc29saWQgJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdGJveC1zaGFkb3c6IGluc2V0IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmUtb2Zmc2V0OiAwO1xuXHRcdFx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHRcdHotaW5kZXg6IDE7XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRkZWZhdWx0OiBjc3NgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXG5cdFx0XHQmOndoZXJlKCA6bm90KCA6ZGlzYWJsZWQgKSApOmhvdmVyIHtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNpemVzWyBzZWxlY3RTaXplIF07XG59O1xuXG5leHBvcnQgY29uc3QgVW5pdFNlbGVjdCA9IHN0eWxlZC5zZWxlY3Q8IFNlbGVjdFByb3BzID5gXG5cdC8vIFRoZSAmJiYgY291bnRlcmFjdHMgPHNlbGVjdD4gc3R5bGVzIGluIFdQIGZvcm1zLmNzc1xuXHQmJiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyLXJhZGl1czogJHsgQ09ORklHLnJhZGl1c1hTbWFsbCB9O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdC8qIFJlbW92aW5nIG1hcmdpbiBlbnN1cmVzIGZvY3VzIHN0eWxlcyBuZWF0bHkgb3ZlcmxheSB0aGUgd3JhcHBlci4gKi9cblx0XHRtYXJnaW46IDA7XG5cdFx0bWluLWhlaWdodDogYXV0bztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblxuXHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0fVxuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXHRcdCR7IHVuaXRTZWxlY3RTaXplcyB9O1xuXHR9XG5gO1xuIl19 */")
  };
  return sizes[selectSize];
};
const UnitSelect = /* @__PURE__ */ (0, import_base.default)("select", process.env.NODE_ENV === "production" ? {
  target: "e1bagdl30"
} : {
  target: "e1bagdl30",
  label: "UnitSelect"
})("&&&{appearance:none;background:transparent;border-radius:", import_utils.CONFIG.radiusXSmall, ";border:none;display:block;outline:none;margin:0;min-height:auto;font-family:inherit;", baseUnitLabelStyles, ";", unitSelectSizes, ";&:not( :disabled ){cursor:pointer;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaXQtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUlzRCIsImZpbGUiOiJ1bml0LWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBDT05GSUcsIHJ0bCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCBOdW1iZXJDb250cm9sIGZyb20gJy4uLy4uL251bWJlci1jb250cm9sJztcbmltcG9ydCB7IEJhY2tkcm9wVUkgfSBmcm9tICcuLi8uLi9pbnB1dC1jb250cm9sL3N0eWxlcy9pbnB1dC1jb250cm9sLXN0eWxlcyc7XG5pbXBvcnQgdHlwZSB7IFNlbGVjdFNpemUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NwYWNlJztcblxuLy8gVXNpbmcgYHNlbGVjdFNpemVgIGluc3RlYWQgb2YgYHNpemVgIHRvIGF2b2lkIGEgdHlwZSBjb25mbGljdCB3aXRoIHRoZVxuLy8gYHNpemVgIEhUTUwgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBlbGVtZW50LlxudHlwZSBTZWxlY3RQcm9wcyA9IHtcblx0c2VsZWN0U2l6ZTogU2VsZWN0U2l6ZTtcbn07XG5cbi8vIFRPRE86IFJlc29sdmUgbmVlZCB0byB1c2UgJiYmIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzL2d1dGVuYmVyZy9pc3N1ZXMvMTg0ODNcblxuZXhwb3J0IGNvbnN0IFZhbHVlSW5wdXQgPSBzdHlsZWQoIE51bWJlckNvbnRyb2wgKWBcblx0JiYmIHtcblx0XHRpbnB1dCB7XG5cdFx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdH1cblxuXHRcdCR7IEJhY2tkcm9wVUkgfSB7XG5cdFx0XHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuMXMgbGluZWFyO1xuXHRcdH1cblx0fVxuYDtcblxuY29uc3QgYmFzZVVuaXRMYWJlbFN0eWxlcyA9ICggeyBzZWxlY3RTaXplIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRjb25zdCBzaXplcyA9IHtcblx0XHRzbWFsbDogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdHBhZGRpbmc6IDJweCAxcHg7XG5cdFx0XHR3aWR0aDogMjBweDtcblx0XHRcdGZvbnQtc2l6ZTogOHB4O1xuXHRcdFx0bGluZS1oZWlnaHQ6IDE7XG5cdFx0XHRsZXR0ZXItc3BhY2luZzogLTAuNXB4O1xuXHRcdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXG5cdFx0XHQmOm5vdCggOmRpc2FibGVkICkge1xuXHRcdFx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDgwMCBdIH07XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRkZWZhdWx0OiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdFx0bWF4LXdpZHRoOiA0OHB4O1xuXHRcdFx0aGVpZ2h0OiAyNHB4O1xuXHRcdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcblx0XHRcdHBhZGRpbmc6ICR7IHNwYWNlKCAxICkgfTtcblxuXHRcdFx0Zm9udC1zaXplOiAxM3B4O1xuXHRcdFx0bGluZS1oZWlnaHQ6IDE7XG5cdFx0XHR0ZXh0LWFsaWduLWxhc3Q6IGNlbnRlcjtcblx0XHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdFx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdFx0XHRmaWVsZC1zaXppbmc6IGNvbnRlbnQ7XG5cblx0XHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdFx0XHR9XG5cdFx0YCxcblx0fTtcblxuXHRyZXR1cm4gc2l6ZXNbIHNlbGVjdFNpemUgXTtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0TGFiZWwgPSBzdHlsZWQuZGl2PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHR9XG5gO1xuXG5jb25zdCB1bml0U2VsZWN0U2l6ZXMgPSAoIHsgc2VsZWN0U2l6ZSA9ICdkZWZhdWx0JyB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0c21hbGw6IGNzc2Bcblx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdFx0dHJhbnNpdGlvbjpcblx0XHRcdFx0Ym94LXNoYWRvdyAwLjFzIGxpbmVhcixcblx0XHRcdFx0Ym9yZGVyIDAuMXMgbGluZWFyO1xuXG5cdFx0XHQkeyBydGwoIHsgYm9yZGVyVG9wTGVmdFJhZGl1czogMCwgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCB9ICkoKSB9XG5cblx0XHRcdCY6bm90KDpkaXNhYmxlZCk6aG92ZXIge1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgMTAwIF0gfTtcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJvcmRlcjogMXB4IHNvbGlkICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRib3gtc2hhZG93OiBpbnNldCAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aCArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lLW9mZnNldDogMDtcblx0XHRcdFx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdFx0XHR6LWluZGV4OiAxO1xuXHRcdFx0fVxuXHRcdGAsXG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRcdFx0Jjp3aGVyZSggOm5vdCggOmRpc2FibGVkICkgKTpob3ZlciB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmU6ICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9IHNvbGlkIHRyYW5zcGFyZW50OyAvLyBGb3IgSGlnaCBDb250cmFzdCBNb2RlXG5cdFx0XHR9XG5cblx0XHRcdCY6Zm9jdXMge1xuXHRcdFx0XHRib3gtc2hhZG93OiAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aEZvY3VzICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmU6ICR7IENPTkZJRy5ib3JkZXJXaWR0aEZvY3VzIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzaXplc1sgc2VsZWN0U2l6ZSBdO1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQvLyBUaGUgJiYmIGNvdW50ZXJhY3RzIDxzZWxlY3Q+IHN0eWxlcyBpbiBXUCBmb3Jtcy5jc3Ncblx0JiYmIHtcblx0XHRhcHBlYXJhbmNlOiBub25lO1xuXHRcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXHRcdGJvcmRlci1yYWRpdXM6ICR7IENPTkZJRy5yYWRpdXNYU21hbGwgfTtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0XHQvKiBSZW1vdmluZyBtYXJnaW4gZW5zdXJlcyBmb2N1cyBzdHlsZXMgbmVhdGx5IG92ZXJsYXkgdGhlIHdyYXBwZXIuICovXG5cdFx0bWFyZ2luOiAwO1xuXHRcdG1pbi1oZWlnaHQ6IGF1dG87XG5cdFx0Zm9udC1mYW1pbHk6IGluaGVyaXQ7XG5cblx0XHQmOm5vdCggOmRpc2FibGVkICkge1xuXHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdH1cblxuXHRcdCR7IGJhc2VVbml0TGFiZWxTdHlsZXMgfTtcblx0XHQkeyB1bml0U2VsZWN0U2l6ZXMgfTtcblx0fVxuYDtcbiJdfQ== */"));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  UnitLabel,
  UnitSelect,
  ValueInput
});
//# sourceMappingURL=unit-control-styles.js.map
