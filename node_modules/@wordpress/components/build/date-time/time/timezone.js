"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var timezone_exports = {};
__export(timezone_exports, {
  default: () => timezone_default
});
module.exports = __toCommonJS(timezone_exports);
var import_i18n = require("@wordpress/i18n");
var import_date = require("@wordpress/date");
var import_tooltip = __toESM(require("../../tooltip"));
var import_styles = require("./styles");
var import_jsx_runtime = require("react/jsx-runtime");
const TimeZone = () => {
  const {
    timezone
  } = (0, import_date.getSettings)();
  const userTimezoneOffset = -1 * ((/* @__PURE__ */ new Date()).getTimezoneOffset() / 60);
  if (Number(timezone.offset) === userTimezoneOffset) {
    return null;
  }
  const offsetSymbol = Number(timezone.offset) >= 0 ? "+" : "";
  const zoneAbbr = "" !== timezone.abbr && isNaN(Number(timezone.abbr)) ? timezone.abbr : `UTC${offsetSymbol}${timezone.offsetFormatted}`;
  const prettyTimezoneString = timezone.string.replace("_", " ");
  const timezoneDetail = "UTC" === timezone.string ? (0, import_i18n.__)("Coordinated Universal Time") : `(${zoneAbbr}) ${prettyTimezoneString}`;
  const hasNoAdditionalTimezoneDetail = prettyTimezoneString.trim().length === 0;
  return hasNoAdditionalTimezoneDetail ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_styles.TimeZone, {
    className: "components-datetime__timezone",
    children: zoneAbbr
  }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_tooltip.default, {
    placement: "top",
    text: timezoneDetail,
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_styles.TimeZone, {
      className: "components-datetime__timezone",
      children: zoneAbbr
    })
  });
};
var timezone_default = TimeZone;
//# sourceMappingURL=timezone.js.map
