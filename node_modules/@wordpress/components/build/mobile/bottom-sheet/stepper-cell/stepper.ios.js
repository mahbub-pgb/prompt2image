"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stepper_ios_exports = {};
__export(stepper_ios_exports, {
  default: () => stepper_ios_default
});
module.exports = __toCommonJS(stepper_ios_exports);
var import_react_native = require("react-native");
var import_compose = require("@wordpress/compose");
var import_icons = require("@wordpress/icons");
var import_style = __toESM(require("./style.scss"));
var import_jsx_runtime = require("react/jsx-runtime");
function Stepper({
  getStylesFromColorScheme,
  isMaxValue,
  isMinValue,
  onPressInDecrement,
  onPressInIncrement,
  onPressOut,
  value,
  children,
  shouldDisplayTextInput
}) {
  const valueStyle = getStylesFromColorScheme(import_style.default.value, import_style.default.valueTextDark);
  const buttonStyle = getStylesFromColorScheme(import_style.default.button, import_style.default.buttonDark);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react_native.View, {
    style: import_style.default.container,
    children: [!shouldDisplayTextInput && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_native.Text, {
      style: valueStyle,
      children: value
    }), children, /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_native.TouchableOpacity, {
      disabled: isMinValue,
      onPressIn: onPressInDecrement,
      onPressOut,
      style: [buttonStyle, isMinValue ? {
        opacity: 0.4
      } : null],
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_icons.Icon, {
        icon: import_icons.reset,
        size: 24,
        color: buttonStyle.color
      })
    }), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_native.TouchableOpacity, {
      testID: "Increment",
      disabled: isMaxValue,
      onPressIn: onPressInIncrement,
      onPressOut,
      style: [buttonStyle, isMaxValue ? {
        opacity: 0.4
      } : null],
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_icons.Icon, {
        icon: import_icons.plus,
        size: 24,
        color: buttonStyle.color
      })
    })]
  });
}
var stepper_ios_default = (0, import_compose.withPreferredColorScheme)(Stepper);
//# sourceMappingURL=stepper.ios.js.map
