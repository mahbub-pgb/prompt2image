{
  "version": 3,
  "sources": ["../../../src/mobile/keyboard-aware-flat-list/index.ios.js"],
  "sourcesContent": ["/**\n * External dependencies\n */\nimport { FlatList, View } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\n/**\n * WordPress dependencies\n */\nimport { useCallback, useEffect, forwardRef, useImperativeHandle } from '@wordpress/element';\nimport { useThrottle } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport useScroll from './use-scroll';\nimport useTextInputOffset from './use-text-input-offset';\nimport useTextInputCaretPosition from './use-text-input-caret-position';\nimport { OPTIMIZATION_ITEMS_THRESHOLD, OPTIMIZATION_PROPS } from './shared';\nimport styles from './styles.scss';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEFAULT_FONT_SIZE = 16;\nconst AnimatedFlatList = Animated.createAnimatedComponent(FlatList);\nconst EMPTY_OBJECT = {};\n\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n/**\n * React component that provides a FlatList that is aware of the keyboard state and can scroll\n * to the currently focused TextInput.\n *\n * @param {Object}    props                              Component props.\n * @param {number}    props.extraScrollHeight            Extra scroll height for the content.\n * @param {Function}  props.onScroll                     Function to be called when the list is scrolled.\n * @param {boolean}   props.scrollEnabled                Whether the list can be scrolled.\n * @param {boolean}   props.shouldPreventAutomaticScroll Whether to prevent scrolling when there's a Keyboard offset set.\n * @param {Object}    props...                           Other props to pass to the FlatList component.\n * @param {RefObject} ref\n * @return {Component} KeyboardAwareFlatList component.\n */\nexport const KeyboardAwareFlatList = ({\n  extraScrollHeight,\n  onScroll,\n  scrollEnabled,\n  shouldPreventAutomaticScroll,\n  ...props\n}, ref) => {\n  const {\n    scrollViewRef,\n    scrollHandler,\n    keyboardOffset,\n    scrollToSection,\n    scrollToElement,\n    onContentSizeChange,\n    lastScrollTo\n  } = useScroll({\n    scrollEnabled,\n    shouldPreventAutomaticScroll,\n    extraScrollHeight,\n    onScroll,\n    onSizeChange\n  });\n  const [getTextInputOffset] = useTextInputOffset(scrollEnabled, scrollViewRef);\n  const onScrollToTextInput = useThrottle(useCallback(async caret => {\n    const {\n      caretHeight = DEFAULT_FONT_SIZE\n    } = caret !== null && caret !== void 0 ? caret : {};\n    const textInputOffset = await getTextInputOffset(caret);\n    const hasTextInputOffset = textInputOffset !== null;\n    if (hasTextInputOffset) {\n      scrollToSection(textInputOffset, caretHeight);\n    }\n  }, [getTextInputOffset, scrollToSection]), 200, {\n    leading: false\n  });\n  const [currentCaretData] = useTextInputCaretPosition(scrollEnabled);\n  const onSizeChange = useCallback(() => onScrollToTextInput(currentCaretData), [currentCaretData, onScrollToTextInput]);\n  useEffect(() => {\n    onScrollToTextInput(currentCaretData);\n  }, [currentCaretData, onScrollToTextInput]);\n\n  // Adds content insets when the keyboard is opened to have\n  // extra padding at the bottom.\n  const contentInset = {\n    bottom: keyboardOffset\n  };\n  const getFlatListRef = useCallback(flatListRef => {\n    scrollViewRef.current = flatListRef?.getNativeScrollRef();\n  }, [scrollViewRef]);\n  useImperativeHandle(ref, () => {\n    return {\n      scrollViewRef: scrollViewRef.current,\n      scrollToSection,\n      scrollToElement,\n      lastScrollTo\n    };\n  });\n  const optimizationProps = props.data?.length > OPTIMIZATION_ITEMS_THRESHOLD ? OPTIMIZATION_PROPS : EMPTY_OBJECT;\n  return /*#__PURE__*/_jsx(View, {\n    style: styles.list__container,\n    children: /*#__PURE__*/_jsx(AnimatedFlatList, {\n      ref: getFlatListRef,\n      automaticallyAdjustContentInsets: false,\n      contentInset: contentInset,\n      keyboardShouldPersistTaps: \"handled\",\n      onContentSizeChange: onContentSizeChange,\n      onScroll: scrollHandler,\n      scrollEventThrottle: 16,\n      style: styles.list__content,\n      ...optimizationProps,\n      ...props\n    })\n  });\n};\nexport default forwardRef(KeyboardAwareFlatList);"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,0BAA+B;AAC/B,qCAAqB;AAKrB,qBAAwE;AACxE,qBAA4B;AAK5B,wBAAsB;AACtB,mCAA+B;AAC/B,2CAAsC;AACtC,oBAAiE;AACjE,oBAAmB;AACnB,yBAA4B;AAC5B,MAAM,oBAAoB;AAC1B,MAAM,mBAAmB,+BAAAA,QAAS,wBAAwB,4BAAQ;AAClE,MAAM,eAAe,CAAC;AAgBf,MAAM,wBAAwB,CAAC;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG,QAAQ;AACT,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,QAAI,kBAAAC,SAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACD,QAAM,CAAC,kBAAkB,QAAI,6BAAAC,SAAmB,eAAe,aAAa;AAC5E,QAAM,0BAAsB,gCAAY,4BAAY,OAAM,UAAS;AACjE,UAAM;AAAA,MACJ,cAAc;AAAA,IAChB,IAAI,UAAU,QAAQ,UAAU,SAAS,QAAQ,CAAC;AAClD,UAAM,kBAAkB,MAAM,mBAAmB,KAAK;AACtD,UAAM,qBAAqB,oBAAoB;AAC/C,QAAI,oBAAoB;AACtB,sBAAgB,iBAAiB,WAAW;AAAA,IAC9C;AAAA,EACF,GAAG,CAAC,oBAAoB,eAAe,CAAC,GAAG,KAAK;AAAA,IAC9C,SAAS;AAAA,EACX,CAAC;AACD,QAAM,CAAC,gBAAgB,QAAI,qCAAAC,SAA0B,aAAa;AAClE,QAAM,mBAAe,4BAAY,MAAM,oBAAoB,gBAAgB,GAAG,CAAC,kBAAkB,mBAAmB,CAAC;AACrH,gCAAU,MAAM;AACd,wBAAoB,gBAAgB;AAAA,EACtC,GAAG,CAAC,kBAAkB,mBAAmB,CAAC;AAI1C,QAAM,eAAe;AAAA,IACnB,QAAQ;AAAA,EACV;AACA,QAAM,qBAAiB,4BAAY,iBAAe;AAChD,kBAAc,UAAU,aAAa,mBAAmB;AAAA,EAC1D,GAAG,CAAC,aAAa,CAAC;AAClB,0CAAoB,KAAK,MAAM;AAC7B,WAAO;AAAA,MACL,eAAe,cAAc;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF,CAAC;AACD,QAAM,oBAAoB,MAAM,MAAM,SAAS,6CAA+B,mCAAqB;AACnG,SAAoB,uCAAAC,KAAK,0BAAM;AAAA,IAC7B,OAAO,cAAAC,QAAO;AAAA,IACd,UAAuB,uCAAAD,KAAK,kBAAkB;AAAA,MAC5C,KAAK;AAAA,MACL,kCAAkC;AAAA,MAClC;AAAA,MACA,2BAA2B;AAAA,MAC3B;AAAA,MACA,UAAU;AAAA,MACV,qBAAqB;AAAA,MACrB,OAAO,cAAAC,QAAO;AAAA,MACd,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC;AAAA,EACH,CAAC;AACH;AACA,IAAO,wBAAQ,2BAAW,qBAAqB;",
  "names": ["Animated", "useScroll", "useTextInputOffset", "useTextInputCaretPosition", "_jsx", "styles"]
}
