"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var index_android_exports = {};
__export(index_android_exports, {
  default: () => Picker
});
module.exports = __toCommonJS(index_android_exports);
var import_react_native = require("react-native");
var import_i18n = require("@wordpress/i18n");
var import_element = require("@wordpress/element");
var import_compose = require("@wordpress/compose");
var import_bottom_sheet = __toESM(require("../bottom-sheet"));
var import_styles = __toESM(require("./styles.scss"));
var import_body = __toESM(require("../../panel/body"));
var import_text_control = __toESM(require("../../text-control"));
var import_jsx_runtime = require("react/jsx-runtime");
function Separator() {
  const separatorStyle = (0, import_compose.usePreferredColorSchemeStyle)(import_styles.default["components-picker__separator"], import_styles.default["components-picker__separator--dark"]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_native.View, {
    style: separatorStyle
  });
}
class Picker extends import_element.Component {
  constructor() {
    super(...arguments);
    this.onClose = this.onClose.bind(this);
    this.onCellPress = this.onCellPress.bind(this);
    this.state = {
      isVisible: false
    };
  }
  presentPicker() {
    this.setState({
      isVisible: true
    });
  }
  onClose() {
    this.setState({
      isVisible: false
    });
  }
  onCellPress(value) {
    const {
      onChange
    } = this.props;
    onChange(value);
    this.onClose();
  }
  getOptions() {
    const {
      options,
      leftAlign
    } = this.props;
    return options.map((option) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_element.Fragment, {
      children: [options.length > 1 && option.separated && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Separator, {}), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_bottom_sheet.default.Cell, {
        icon: option.icon,
        leftAlign,
        label: option.label,
        separatorType: "none",
        onPress: () => this.onCellPress(option.value),
        disabled: option.disabled,
        style: option.disabled && import_styles.default["components-picker__button--disabled"]
      })]
    }, `${option.label}-${option.value}`));
  }
  render() {
    const {
      hideCancelButton,
      title,
      testID
    } = this.props;
    const {
      isVisible
    } = this.state;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_bottom_sheet.default, {
      isVisible,
      onClose: this.onClose,
      hideHeader: true,
      testID,
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_body.default, {
        title,
        style: import_styles.default["components-picker__panel"],
        children: [this.getOptions(), !hideCancelButton && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_text_control.default, {
          label: (0, import_i18n.__)("Cancel"),
          onPress: this.onClose,
          separatorType: "none"
        })]
      })
    });
  }
}
//# sourceMappingURL=index.android.js.map
