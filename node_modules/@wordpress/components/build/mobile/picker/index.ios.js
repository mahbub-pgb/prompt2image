"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var index_ios_exports = {};
__export(index_ios_exports, {
  default: () => index_ios_default
});
module.exports = __toCommonJS(index_ios_exports);
var import_react_native = require("react-native");
var import_i18n = require("@wordpress/i18n");
var import_element = require("@wordpress/element");
var import_data = require("@wordpress/data");
var import_compose = require("@wordpress/compose");
var import_styles = __toESM(require("./styles.scss"));
var import_bottom_sheet_context = require("../bottom-sheet/bottom-sheet-context");
var import_jsx_runtime = require("react/jsx-runtime");
class Picker extends import_element.Component {
  presentPicker() {
    const {
      options,
      onChange,
      title,
      destructiveButtonIndex,
      disabledButtonIndices,
      getAnchor,
      isBottomSheetOpened,
      closeBottomSheet,
      onHandleClosingBottomSheet,
      colorScheme
    } = this.props;
    const labels = options.map(({
      label
    }) => label);
    const fullOptions = [(0, import_i18n.__)("Cancel")].concat(labels);
    const buttonTitleColor = colorScheme === "light" ? import_styles.default["components-picker__button-title"].color : import_styles.default["components-picker__button-title--dark"].color;
    import_react_native.ActionSheetIOS.showActionSheetWithOptions({
      title,
      options: fullOptions,
      cancelButtonIndex: 0,
      destructiveButtonIndex,
      disabledButtonIndices,
      anchor: getAnchor && getAnchor(),
      tintColor: buttonTitleColor
    }, (buttonIndex) => {
      if (buttonIndex === 0) {
        return;
      }
      const selected = options[buttonIndex - 1];
      if (selected.requiresModal && isBottomSheetOpened) {
        onHandleClosingBottomSheet(() => {
          onChange(selected.value);
        });
        closeBottomSheet();
      } else {
        onChange(selected.value);
      }
    });
  }
  render() {
    return null;
  }
}
const PickerComponent = (0, import_element.forwardRef)((props, ref) => {
  const isBottomSheetOpened = (0, import_data.useSelect)((select) => select("core/edit-post").isEditorSidebarOpened());
  const {
    closeGeneralSidebar
  } = (0, import_data.useDispatch)("core/edit-post");
  const {
    onHandleClosingBottomSheet
  } = (0, import_element.useContext)(import_bottom_sheet_context.BottomSheetContext);
  const colorScheme = (0, import_compose.usePreferredColorScheme)();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Picker, {
    ref,
    ...props,
    isBottomSheetOpened,
    closeBottomSheet: closeGeneralSidebar,
    onHandleClosingBottomSheet,
    colorScheme
  });
});
var index_ios_default = PickerComponent;
//# sourceMappingURL=index.ios.js.map
