"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var index_ios_exports = {};
__export(index_ios_exports, {
  KeyboardAvoidingView: () => KeyboardAvoidingView,
  default: () => index_ios_default
});
module.exports = __toCommonJS(index_ios_exports);
var import_react_native = require("react-native");
var import_react_native_safe_area = __toESM(require("react-native-safe-area"));
var import_element = require("@wordpress/element");
var import_compose = require("@wordpress/compose");
var import_use_is_floating_keyboard = __toESM(require("../utils/use-is-floating-keyboard"));
var import_styles = __toESM(require("./styles.scss"));
var import_jsx_runtime = require("react/jsx-runtime");
const AnimatedKeyboardAvoidingView = import_react_native.Animated.createAnimatedComponent(import_react_native.KeyboardAvoidingView);
const MIN_HEIGHT = 44;
const KeyboardAvoidingView = ({
  parentHeight,
  style,
  withAnimatedHeight = false,
  ...otherProps
}) => {
  const [resizeObserver, sizes] = (0, import_compose.useResizeObserver)();
  const [isKeyboardOpen, setIsKeyboardOpen] = (0, import_element.useState)(false);
  const [safeAreaBottomInset, setSafeAreaBottomInset] = (0, import_element.useState)(0);
  const {
    height = 0
  } = sizes || {};
  const floatingKeyboard = (0, import_use_is_floating_keyboard.default)();
  const animatedHeight = (0, import_element.useRef)(new import_react_native.Animated.Value(MIN_HEIGHT)).current;
  const {
    height: fullHeight
  } = import_react_native.Dimensions.get("screen");
  const keyboardVerticalOffset = fullHeight - parentHeight;
  (0, import_element.useEffect)(() => {
    import_react_native_safe_area.default.getSafeAreaInsetsForRootView().then(({
      safeAreaInsets
    }) => {
      setSafeAreaBottomInset(safeAreaInsets.bottom);
    });
    const safeAreaSubscription = import_react_native_safe_area.default.addEventListener("safeAreaInsetsForRootViewDidChange", onSafeAreaInsetsUpdate);
    const keyboardShowSubscription = import_react_native.Keyboard.addListener("keyboardWillShow", onKeyboardWillShow);
    const keyboardHideSubscription = import_react_native.Keyboard.addListener("keyboardWillHide", onKeyboardWillHide);
    return () => {
      safeAreaSubscription.remove();
      keyboardShowSubscription.remove();
      keyboardHideSubscription.remove();
    };
  }, []);
  function onSafeAreaInsetsUpdate({
    safeAreaInsets
  }) {
    setSafeAreaBottomInset(safeAreaInsets.bottom);
  }
  function onKeyboardWillShow({
    endCoordinates
  }) {
    setIsKeyboardOpen(true);
    animatedHeight.setValue(endCoordinates.height + MIN_HEIGHT);
  }
  function onKeyboardWillHide({
    duration,
    startCoordinates
  }) {
    const keyboardIsOpenBreakpoint = startCoordinates.height > 100 ? startCoordinates.height / 3 : 100;
    const animatedListenerId = animatedHeight.addListener(({
      value
    }) => {
      if (value < keyboardIsOpenBreakpoint) {
        setIsKeyboardOpen(false);
      }
    });
    import_react_native.Animated.timing(animatedHeight, {
      toValue: MIN_HEIGHT,
      duration,
      useNativeDriver: false
    }).start(() => {
      animatedHeight.removeListener(animatedListenerId);
    });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AnimatedKeyboardAvoidingView, {
    ...otherProps,
    enabled: !floatingKeyboard,
    behavior: "padding",
    keyboardVerticalOffset,
    style: withAnimatedHeight ? [style, {
      height: animatedHeight,
      marginBottom: isKeyboardOpen ? -safeAreaBottomInset : 0
    }] : style,
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react_native.View, {
      style: [{
        top: -height + MIN_HEIGHT
      }, import_styles.default.animatedChildStyle, !withAnimatedHeight && import_styles.default.defaultChildStyle],
      children: [resizeObserver, otherProps.children]
    })
  });
};
var index_ios_default = KeyboardAvoidingView;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  KeyboardAvoidingView
});
//# sourceMappingURL=index.ios.js.map
