{
  "version": 3,
  "sources": ["../../src/slot-fill/provider.tsx"],
  "sourcesContent": ["/**\n * WordPress dependencies\n */\nimport { useState } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport SlotFillContext from './context';\nimport { observableMap } from '@wordpress/compose';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction createSlotRegistry() {\n  const slots = observableMap();\n  const fills = observableMap();\n  function registerSlot(name, instance) {\n    slots.set(name, instance);\n  }\n  function unregisterSlot(name, instance) {\n    // If a previous instance of a Slot by this name unmounts, do nothing,\n    // as the slot and its fills should only be removed for the current\n    // known instance.\n    if (slots.get(name) !== instance) {\n      return;\n    }\n    slots.delete(name);\n  }\n  function registerFill(name, instance, children) {\n    fills.set(name, [...(fills.get(name) || []), {\n      instance,\n      children\n    }]);\n  }\n  function unregisterFill(name, instance) {\n    const fillsForName = fills.get(name);\n    if (!fillsForName) {\n      return;\n    }\n    fills.set(name, fillsForName.filter(fill => fill.instance !== instance));\n  }\n  function updateFill(name, instance, children) {\n    const fillsForName = fills.get(name);\n    if (!fillsForName) {\n      return;\n    }\n    const fillForInstance = fillsForName.find(f => f.instance === instance);\n    if (!fillForInstance) {\n      return;\n    }\n    if (fillForInstance.children === children) {\n      return;\n    }\n    fills.set(name, fillsForName.map(f => {\n      if (f.instance === instance) {\n        // Replace with new record with updated `children`.\n        return {\n          instance,\n          children\n        };\n      }\n      return f;\n    }));\n  }\n  return {\n    slots,\n    fills,\n    registerSlot,\n    unregisterSlot,\n    registerFill,\n    unregisterFill,\n    updateFill\n  };\n}\nexport function SlotFillProvider({\n  children\n}) {\n  const [contextValue] = useState(createSlotRegistry);\n  return /*#__PURE__*/_jsx(SlotFillContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\nexport default SlotFillProvider;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,qBAAyB;AAKzB,qBAA4B;AAC5B,qBAA8B;AAC9B,yBAA4B;AAC5B,SAAS,qBAAqB;AAC5B,QAAM,YAAQ,8BAAc;AAC5B,QAAM,YAAQ,8BAAc;AAC5B,WAAS,aAAa,MAAM,UAAU;AACpC,UAAM,IAAI,MAAM,QAAQ;AAAA,EAC1B;AACA,WAAS,eAAe,MAAM,UAAU;AAItC,QAAI,MAAM,IAAI,IAAI,MAAM,UAAU;AAChC;AAAA,IACF;AACA,UAAM,OAAO,IAAI;AAAA,EACnB;AACA,WAAS,aAAa,MAAM,UAAU,UAAU;AAC9C,UAAM,IAAI,MAAM,CAAC,GAAI,MAAM,IAAI,IAAI,KAAK,CAAC,GAAI;AAAA,MAC3C;AAAA,MACA;AAAA,IACF,CAAC,CAAC;AAAA,EACJ;AACA,WAAS,eAAe,MAAM,UAAU;AACtC,UAAM,eAAe,MAAM,IAAI,IAAI;AACnC,QAAI,CAAC,cAAc;AACjB;AAAA,IACF;AACA,UAAM,IAAI,MAAM,aAAa,OAAO,UAAQ,KAAK,aAAa,QAAQ,CAAC;AAAA,EACzE;AACA,WAAS,WAAW,MAAM,UAAU,UAAU;AAC5C,UAAM,eAAe,MAAM,IAAI,IAAI;AACnC,QAAI,CAAC,cAAc;AACjB;AAAA,IACF;AACA,UAAM,kBAAkB,aAAa,KAAK,OAAK,EAAE,aAAa,QAAQ;AACtE,QAAI,CAAC,iBAAiB;AACpB;AAAA,IACF;AACA,QAAI,gBAAgB,aAAa,UAAU;AACzC;AAAA,IACF;AACA,UAAM,IAAI,MAAM,aAAa,IAAI,OAAK;AACpC,UAAI,EAAE,aAAa,UAAU;AAE3B,eAAO;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT,CAAC,CAAC;AAAA,EACJ;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AACO,SAAS,iBAAiB;AAAA,EAC/B;AACF,GAAG;AACD,QAAM,CAAC,YAAY,QAAI,yBAAS,kBAAkB;AAClD,SAAoB,uCAAAA,KAAK,eAAAC,QAAgB,UAAU;AAAA,IACjD,OAAO;AAAA,IACP;AAAA,EACF,CAAC;AACH;AACA,IAAO,mBAAQ;",
  "names": ["_jsx", "SlotFillContext"]
}
