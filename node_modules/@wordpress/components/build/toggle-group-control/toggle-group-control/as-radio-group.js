"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var as_radio_group_exports = {};
__export(as_radio_group_exports, {
  ToggleGroupControlAsRadioGroup: () => ToggleGroupControlAsRadioGroup
});
module.exports = __toCommonJS(as_radio_group_exports);
var Ariakit = __toESM(require("@ariakit/react"));
var import_compose = require("@wordpress/compose");
var import_element = require("@wordpress/element");
var import_i18n = require("@wordpress/i18n");
var import_view = require("../../view");
var import_context = __toESM(require("../context"));
var import_utils = require("./utils");
var import_jsx_runtime = require("react/jsx-runtime");
function UnforwardedToggleGroupControlAsRadioGroup({
  children,
  isAdaptiveWidth,
  label,
  onChange: onChangeProp,
  size,
  value: valueProp,
  id: idProp,
  setSelectedElement,
  ...otherProps
}, forwardedRef) {
  const generatedId = (0, import_compose.useInstanceId)(ToggleGroupControlAsRadioGroup, "toggle-group-control-as-radio-group");
  const baseId = idProp || generatedId;
  const {
    value,
    defaultValue
  } = (0, import_utils.useComputeControlledOrUncontrolledValue)(valueProp);
  const wrappedOnChangeProp = onChangeProp ? (v) => {
    onChangeProp(v !== null && v !== void 0 ? v : void 0);
  } : void 0;
  const radio = Ariakit.useRadioStore({
    defaultValue,
    value,
    setValue: wrappedOnChangeProp,
    rtl: (0, import_i18n.isRTL)()
  });
  const selectedValue = Ariakit.useStoreState(radio, "value");
  const setValue = radio.setValue;
  (0, import_element.useEffect)(() => {
    if (selectedValue === "") {
      radio.setActiveId(void 0);
    }
  }, [radio, selectedValue]);
  const groupContextValue = (0, import_element.useMemo)(() => ({
    activeItemIsNotFirstItem: () => radio.getState().activeId !== radio.first(),
    baseId,
    isBlock: !isAdaptiveWidth,
    size,
    // @ts-expect-error - This is wrong and we should fix it.
    value: selectedValue,
    // @ts-expect-error - This is wrong and we should fix it.
    setValue,
    setSelectedElement
  }), [baseId, isAdaptiveWidth, radio, selectedValue, setSelectedElement, setValue, size]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_context.default.Provider, {
    value: groupContextValue,
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Ariakit.RadioGroup, {
      store: radio,
      "aria-label": label,
      render: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_view.View, {}),
      ...otherProps,
      id: baseId,
      ref: forwardedRef,
      children
    })
  });
}
const ToggleGroupControlAsRadioGroup = (0, import_element.forwardRef)(UnforwardedToggleGroupControlAsRadioGroup);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ToggleGroupControlAsRadioGroup
});
//# sourceMappingURL=as-radio-group.js.map
