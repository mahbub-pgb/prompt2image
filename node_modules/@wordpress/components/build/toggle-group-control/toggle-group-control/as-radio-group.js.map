{
  "version": 3,
  "sources": ["../../../src/toggle-group-control/toggle-group-control/as-radio-group.tsx"],
  "sourcesContent": ["/**\n * External dependencies\n */\n\nimport * as Ariakit from '@ariakit/react';\n\n/**\n * WordPress dependencies\n */\nimport { useInstanceId } from '@wordpress/compose';\nimport { forwardRef, useEffect, useMemo } from '@wordpress/element';\nimport { isRTL } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { View } from '../../view';\nimport ToggleGroupControlContext from '../context';\nimport { useComputeControlledOrUncontrolledValue } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction UnforwardedToggleGroupControlAsRadioGroup({\n  children,\n  isAdaptiveWidth,\n  label,\n  onChange: onChangeProp,\n  size,\n  value: valueProp,\n  id: idProp,\n  setSelectedElement,\n  ...otherProps\n}, forwardedRef) {\n  const generatedId = useInstanceId(ToggleGroupControlAsRadioGroup, 'toggle-group-control-as-radio-group');\n  const baseId = idProp || generatedId;\n\n  // Use a heuristic to understand if the component is being used in controlled\n  // or uncontrolled mode, and consequently:\n  // - when controlled, convert `undefined` values to `''` (ie. \"no value\")\n  // - use the `value` prop as the `defaultValue` when uncontrolled\n  const {\n    value,\n    defaultValue\n  } = useComputeControlledOrUncontrolledValue(valueProp);\n\n  // `useRadioStore`'s `setValue` prop can be called with `null`, while\n  // the component's `onChange` prop only expects `undefined`\n  const wrappedOnChangeProp = onChangeProp ? v => {\n    onChangeProp(v !== null && v !== void 0 ? v : undefined);\n  } : undefined;\n  const radio = Ariakit.useRadioStore({\n    defaultValue,\n    value,\n    setValue: wrappedOnChangeProp,\n    rtl: isRTL()\n  });\n  const selectedValue = Ariakit.useStoreState(radio, 'value');\n  const setValue = radio.setValue;\n\n  // Ensures that the active id is also reset after the value is \"reset\" by the consumer.\n  useEffect(() => {\n    if (selectedValue === '') {\n      radio.setActiveId(undefined);\n    }\n  }, [radio, selectedValue]);\n  const groupContextValue = useMemo(() => ({\n    activeItemIsNotFirstItem: () => radio.getState().activeId !== radio.first(),\n    baseId,\n    isBlock: !isAdaptiveWidth,\n    size,\n    // @ts-expect-error - This is wrong and we should fix it.\n    value: selectedValue,\n    // @ts-expect-error - This is wrong and we should fix it.\n    setValue,\n    setSelectedElement\n  }), [baseId, isAdaptiveWidth, radio, selectedValue, setSelectedElement, setValue, size]);\n  return /*#__PURE__*/_jsx(ToggleGroupControlContext.Provider, {\n    value: groupContextValue,\n    children: /*#__PURE__*/_jsx(Ariakit.RadioGroup, {\n      store: radio,\n      \"aria-label\": label,\n      render: /*#__PURE__*/_jsx(View, {}),\n      ...otherProps,\n      id: baseId,\n      ref: forwardedRef,\n      children: children\n    })\n  });\n}\nexport const ToggleGroupControlAsRadioGroup = forwardRef(UnforwardedToggleGroupControlAsRadioGroup);"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,cAAyB;AAKzB,qBAA8B;AAC9B,qBAA+C;AAC/C,kBAAsB;AAKtB,kBAAqB;AACrB,qBAAsC;AACtC,mBAAwD;AACxD,yBAA4B;AAC5B,SAAS,0CAA0C;AAAA,EACjD;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAU;AAAA,EACV;AAAA,EACA,OAAO;AAAA,EACP,IAAI;AAAA,EACJ;AAAA,EACA,GAAG;AACL,GAAG,cAAc;AACf,QAAM,kBAAc,8BAAc,gCAAgC,qCAAqC;AACvG,QAAM,SAAS,UAAU;AAMzB,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,QAAI,sDAAwC,SAAS;AAIrD,QAAM,sBAAsB,eAAe,OAAK;AAC9C,iBAAa,MAAM,QAAQ,MAAM,SAAS,IAAI,MAAS;AAAA,EACzD,IAAI;AACJ,QAAM,QAAQ,QAAQ,cAAc;AAAA,IAClC;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV,SAAK,mBAAM;AAAA,EACb,CAAC;AACD,QAAM,gBAAgB,QAAQ,cAAc,OAAO,OAAO;AAC1D,QAAM,WAAW,MAAM;AAGvB,gCAAU,MAAM;AACd,QAAI,kBAAkB,IAAI;AACxB,YAAM,YAAY,MAAS;AAAA,IAC7B;AAAA,EACF,GAAG,CAAC,OAAO,aAAa,CAAC;AACzB,QAAM,wBAAoB,wBAAQ,OAAO;AAAA,IACvC,0BAA0B,MAAM,MAAM,SAAS,EAAE,aAAa,MAAM,MAAM;AAAA,IAC1E;AAAA,IACA,SAAS,CAAC;AAAA,IACV;AAAA;AAAA,IAEA,OAAO;AAAA;AAAA,IAEP;AAAA,IACA;AAAA,EACF,IAAI,CAAC,QAAQ,iBAAiB,OAAO,eAAe,oBAAoB,UAAU,IAAI,CAAC;AACvF,SAAoB,uCAAAA,KAAK,eAAAC,QAA0B,UAAU;AAAA,IAC3D,OAAO;AAAA,IACP,UAAuB,uCAAAD,KAAK,QAAQ,YAAY;AAAA,MAC9C,OAAO;AAAA,MACP,cAAc;AAAA,MACd,QAAqB,uCAAAA,KAAK,kBAAM,CAAC,CAAC;AAAA,MAClC,GAAG;AAAA,MACH,IAAI;AAAA,MACJ,KAAK;AAAA,MACL;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;AACO,MAAM,qCAAiC,2BAAW,yCAAyC;",
  "names": ["_jsx", "ToggleGroupControlContext"]
}
