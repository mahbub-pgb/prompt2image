{
  "version": 3,
  "sources": ["../../src/text/utils.ts"],
  "sourcesContent": ["/**\n * External dependencies\n */\nimport memoize from 'memize';\nimport { findAll } from 'highlight-words-core';\n\n/**\n * WordPress dependencies\n */\nimport { createElement } from '@wordpress/element';\n\n/**\n * Source:\n * https://github.com/bvaughn/react-highlight-words/blob/HEAD/src/Highlighter.js\n */\n\n/**\n * @typedef Options\n * @property {string}                                                     [activeClassName='']      Classname for active highlighted areas.\n * @property {number}                                                     [activeIndex=-1]          The index of the active highlighted area.\n * @property {import('react').AllHTMLAttributes<HTMLDivElement>['style']} [activeStyle]             Styles to apply to the active highlighted area.\n * @property {boolean}                                                    [autoEscape]              Whether to automatically escape text.\n * @property {boolean}                                                    [caseSensitive=false]     Whether to highlight in a case-sensitive manner.\n * @property {string}                                                     children                  Children to highlight.\n * @property {import('highlight-words-core').FindAllArgs['findChunks']}   [findChunks]              Custom `findChunks` function to pass to `highlight-words-core`.\n * @property {string | Record<string, unknown>}                           [highlightClassName='']   Classname to apply to highlighted text or a Record of classnames to apply to given text (which should be the key).\n * @property {import('react').AllHTMLAttributes<HTMLDivElement>['style']} [highlightStyle={}]       Styles to apply to highlighted text.\n * @property {keyof JSX.IntrinsicElements}                                [highlightTag='mark']     Tag to use for the highlighted text.\n * @property {import('highlight-words-core').FindAllArgs['sanitize']}     [sanitize]                Custom `sanitize` function to pass to `highlight-words-core`.\n * @property {string[]}                                                   [searchWords=[]]          Words to search for and highlight.\n * @property {string}                                                     [unhighlightClassName=''] Classname to apply to unhighlighted text.\n * @property {import('react').AllHTMLAttributes<HTMLDivElement>['style']} [unhighlightStyle]        Style to apply to unhighlighted text.\n */\n\n/**\n * Maps props to lowercase names.\n *\n * @param object Props to map.\n * @return The mapped props.\n */\nconst lowercaseProps = object => {\n  const mapped = {};\n  for (const key in object) {\n    mapped[key.toLowerCase()] = object[key];\n  }\n  return mapped;\n};\nconst memoizedLowercaseProps = memoize(lowercaseProps);\n\n/**\n * @param options\n * @param options.activeClassName\n * @param options.activeIndex\n * @param options.activeStyle\n * @param options.autoEscape\n * @param options.caseSensitive\n * @param options.children\n * @param options.findChunks\n * @param options.highlightClassName\n * @param options.highlightStyle\n * @param options.highlightTag\n * @param options.sanitize\n * @param options.searchWords\n * @param options.unhighlightClassName\n * @param options.unhighlightStyle\n */\nexport function createHighlighterText({\n  activeClassName = '',\n  activeIndex = -1,\n  activeStyle,\n  autoEscape,\n  caseSensitive = false,\n  children,\n  findChunks,\n  highlightClassName = '',\n  highlightStyle = {},\n  highlightTag = 'mark',\n  sanitize,\n  searchWords = [],\n  unhighlightClassName = '',\n  unhighlightStyle\n}) {\n  if (!children) {\n    return null;\n  }\n  if (typeof children !== 'string') {\n    return children;\n  }\n  const textToHighlight = children;\n  const chunks = findAll({\n    autoEscape,\n    caseSensitive,\n    findChunks,\n    sanitize,\n    searchWords,\n    textToHighlight\n  });\n  const HighlightTag = highlightTag;\n  let highlightIndex = -1;\n  let highlightClassNames = '';\n  let highlightStyles;\n  const textContent = chunks.map((chunk, index) => {\n    const text = textToHighlight.substr(chunk.start, chunk.end - chunk.start);\n    if (chunk.highlight) {\n      highlightIndex++;\n      let highlightClass;\n      if (typeof highlightClassName === 'object') {\n        if (!caseSensitive) {\n          highlightClassName = memoizedLowercaseProps(highlightClassName);\n          highlightClass = highlightClassName[text.toLowerCase()];\n        } else {\n          highlightClass = highlightClassName[text];\n        }\n      } else {\n        highlightClass = highlightClassName;\n      }\n      const isActive = highlightIndex === +activeIndex;\n      highlightClassNames = `${highlightClass} ${isActive ? activeClassName : ''}`;\n      highlightStyles = isActive === true && activeStyle !== null ? Object.assign({}, highlightStyle, activeStyle) : highlightStyle;\n      const props = {\n        children: text,\n        className: highlightClassNames,\n        key: index,\n        style: highlightStyles\n      };\n\n      // Don't attach arbitrary props to DOM elements; this triggers React DEV warnings (https://fb.me/react-unknown-prop)\n      // Only pass through the highlightIndex attribute for custom components.\n      if (typeof HighlightTag !== 'string') {\n        props.highlightIndex = highlightIndex;\n      }\n      return createElement(HighlightTag, props);\n    }\n    return createElement('span', {\n      children: text,\n      className: unhighlightClassName,\n      key: index,\n      style: unhighlightStyle\n    });\n  });\n  return textContent;\n}"],
  "mappings": "AAGA,OAAO,aAAa;AACpB,SAAS,eAAe;AAKxB,SAAS,qBAAqB;AA+B9B,MAAM,iBAAiB,YAAU;AAC/B,QAAM,SAAS,CAAC;AAChB,aAAW,OAAO,QAAQ;AACxB,WAAO,IAAI,YAAY,CAAC,IAAI,OAAO,GAAG;AAAA,EACxC;AACA,SAAO;AACT;AACA,MAAM,yBAAyB,QAAQ,cAAc;AAmB9C,SAAS,sBAAsB;AAAA,EACpC,kBAAkB;AAAA,EAClB,cAAc;AAAA,EACd;AAAA,EACA;AAAA,EACA,gBAAgB;AAAA,EAChB;AAAA,EACA;AAAA,EACA,qBAAqB;AAAA,EACrB,iBAAiB,CAAC;AAAA,EAClB,eAAe;AAAA,EACf;AAAA,EACA,cAAc,CAAC;AAAA,EACf,uBAAuB;AAAA,EACvB;AACF,GAAG;AACD,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,EACT;AACA,MAAI,OAAO,aAAa,UAAU;AAChC,WAAO;AAAA,EACT;AACA,QAAM,kBAAkB;AACxB,QAAM,SAAS,QAAQ;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACD,QAAM,eAAe;AACrB,MAAI,iBAAiB;AACrB,MAAI,sBAAsB;AAC1B,MAAI;AACJ,QAAM,cAAc,OAAO,IAAI,CAAC,OAAO,UAAU;AAC/C,UAAM,OAAO,gBAAgB,OAAO,MAAM,OAAO,MAAM,MAAM,MAAM,KAAK;AACxE,QAAI,MAAM,WAAW;AACnB;AACA,UAAI;AACJ,UAAI,OAAO,uBAAuB,UAAU;AAC1C,YAAI,CAAC,eAAe;AAClB,+BAAqB,uBAAuB,kBAAkB;AAC9D,2BAAiB,mBAAmB,KAAK,YAAY,CAAC;AAAA,QACxD,OAAO;AACL,2BAAiB,mBAAmB,IAAI;AAAA,QAC1C;AAAA,MACF,OAAO;AACL,yBAAiB;AAAA,MACnB;AACA,YAAM,WAAW,mBAAmB,CAAC;AACrC,4BAAsB,GAAG,cAAc,IAAI,WAAW,kBAAkB,EAAE;AAC1E,wBAAkB,aAAa,QAAQ,gBAAgB,OAAO,OAAO,OAAO,CAAC,GAAG,gBAAgB,WAAW,IAAI;AAC/G,YAAM,QAAQ;AAAA,QACZ,UAAU;AAAA,QACV,WAAW;AAAA,QACX,KAAK;AAAA,QACL,OAAO;AAAA,MACT;AAIA,UAAI,OAAO,iBAAiB,UAAU;AACpC,cAAM,iBAAiB;AAAA,MACzB;AACA,aAAO,cAAc,cAAc,KAAK;AAAA,IAC1C;AACA,WAAO,cAAc,QAAQ;AAAA,MAC3B,UAAU;AAAA,MACV,WAAW;AAAA,MACX,KAAK;AAAA,MACL,OAAO;AAAA,IACT,CAAC;AAAA,EACH,CAAC;AACD,SAAO;AACT;",
  "names": []
}
