{
  "version": 3,
  "sources": ["../../src/date-time/utils.ts"],
  "sourcesContent": ["/**\n * External dependencies\n */\nimport { toDate } from 'date-fns';\n\n/**\n * Internal dependencies\n */\n\nimport { COMMIT, PRESS_DOWN, PRESS_UP } from '../input-control/reducer/actions';\n\n/**\n * Like date-fn's toDate, but tries to guess the format when a string is\n * given.\n *\n * @param input Value to turn into a date.\n */\nexport function inputToDate(input) {\n  if (typeof input === 'string') {\n    return new Date(input);\n  }\n  return toDate(input);\n}\n\n/**\n * Converts a 12-hour time to a 24-hour time.\n * @param hours\n * @param isPm\n */\nexport function from12hTo24h(hours, isPm) {\n  return isPm ? (hours % 12 + 12) % 24 : hours % 12;\n}\n\n/**\n * Converts a 24-hour time to a 12-hour time.\n * @param hours\n */\nexport function from24hTo12h(hours) {\n  return hours % 12 || 12;\n}\n\n/**\n * Creates an InputControl reducer used to pad an input so that it is always a\n * given width. For example, the hours and minutes inputs are padded to 2 so\n * that '4' appears as '04'.\n *\n * @param pad How many digits the value should be.\n */\nexport function buildPadInputStateReducer(pad) {\n  return (state, action) => {\n    const nextState = {\n      ...state\n    };\n    if (action.type === COMMIT || action.type === PRESS_UP || action.type === PRESS_DOWN) {\n      if (nextState.value !== undefined) {\n        nextState.value = nextState.value.toString().padStart(pad, '0');\n      }\n    }\n    return nextState;\n  };\n}\n\n/**\n * Validates the target of a React event to ensure it is an input element and\n * that the input is valid.\n * @param event\n */\nexport function validateInputElementTarget(event) {\n  var _ownerDocument$defaul;\n  // `instanceof` checks need to get the instance definition from the\n  // corresponding window object \u2014 therefore, the following logic makes\n  // the component work correctly even when rendered inside an iframe.\n  const HTMLInputElementInstance = (_ownerDocument$defaul = event.target?.ownerDocument.defaultView?.HTMLInputElement) !== null && _ownerDocument$defaul !== void 0 ? _ownerDocument$defaul : HTMLInputElement;\n  if (!(event.target instanceof HTMLInputElementInstance)) {\n    return false;\n  }\n  return event.target.validity.valid;\n}"],
  "mappings": "AAGA,SAAS,cAAc;AAMvB,SAAS,QAAQ,YAAY,gBAAgB;AAQtC,SAAS,YAAY,OAAO;AACjC,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO,IAAI,KAAK,KAAK;AAAA,EACvB;AACA,SAAO,OAAO,KAAK;AACrB;AAOO,SAAS,aAAa,OAAO,MAAM;AACxC,SAAO,QAAQ,QAAQ,KAAK,MAAM,KAAK,QAAQ;AACjD;AAMO,SAAS,aAAa,OAAO;AAClC,SAAO,QAAQ,MAAM;AACvB;AASO,SAAS,0BAA0B,KAAK;AAC7C,SAAO,CAAC,OAAO,WAAW;AACxB,UAAM,YAAY;AAAA,MAChB,GAAG;AAAA,IACL;AACA,QAAI,OAAO,SAAS,UAAU,OAAO,SAAS,YAAY,OAAO,SAAS,YAAY;AACpF,UAAI,UAAU,UAAU,QAAW;AACjC,kBAAU,QAAQ,UAAU,MAAM,SAAS,EAAE,SAAS,KAAK,GAAG;AAAA,MAChE;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;AAOO,SAAS,2BAA2B,OAAO;AAChD,MAAI;AAIJ,QAAM,4BAA4B,wBAAwB,MAAM,QAAQ,cAAc,aAAa,sBAAsB,QAAQ,0BAA0B,SAAS,wBAAwB;AAC5L,MAAI,EAAE,MAAM,kBAAkB,2BAA2B;AACvD,WAAO;AAAA,EACT;AACA,SAAO,MAAM,OAAO,SAAS;AAC/B;",
  "names": []
}
