import { toDate } from "date-fns";
import { COMMIT, PRESS_DOWN, PRESS_UP } from "../input-control/reducer/actions";
function inputToDate(input) {
  if (typeof input === "string") {
    return new Date(input);
  }
  return toDate(input);
}
function from12hTo24h(hours, isPm) {
  return isPm ? (hours % 12 + 12) % 24 : hours % 12;
}
function from24hTo12h(hours) {
  return hours % 12 || 12;
}
function buildPadInputStateReducer(pad) {
  return (state, action) => {
    const nextState = {
      ...state
    };
    if (action.type === COMMIT || action.type === PRESS_UP || action.type === PRESS_DOWN) {
      if (nextState.value !== void 0) {
        nextState.value = nextState.value.toString().padStart(pad, "0");
      }
    }
    return nextState;
  };
}
function validateInputElementTarget(event) {
  var _ownerDocument$defaul;
  const HTMLInputElementInstance = (_ownerDocument$defaul = event.target?.ownerDocument.defaultView?.HTMLInputElement) !== null && _ownerDocument$defaul !== void 0 ? _ownerDocument$defaul : HTMLInputElement;
  if (!(event.target instanceof HTMLInputElementInstance)) {
    return false;
  }
  return event.target.validity.valid;
}
export {
  buildPadInputStateReducer,
  from12hTo24h,
  from24hTo12h,
  inputToDate,
  validateInputElementTarget
};
//# sourceMappingURL=utils.js.map
