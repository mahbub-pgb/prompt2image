{
  "version": 3,
  "sources": ["../../../src/border-box-control/border-box-control/hook.ts"],
  "sourcesContent": ["/**\n * WordPress dependencies\n */\nimport { useMemo, useState } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport * as styles from '../styles';\nimport { getBorderDiff, getCommonBorder, getSplitBorders, hasMixedBorders, hasSplitBorders, isCompleteBorder, isEmptyBorder } from '../utils';\nimport { useContextSystem } from '../../context';\nimport { useCx } from '../../utils/hooks/use-cx';\nimport { maybeWarnDeprecated36pxSize } from '../../utils/deprecated-36px-size';\nexport function useBorderBoxControl(props) {\n  const {\n    className,\n    colors = [],\n    onChange,\n    enableAlpha = false,\n    enableStyle = true,\n    size = 'default',\n    value,\n    __experimentalIsRenderedInSidebar = false,\n    __next40pxDefaultSize,\n    ...otherProps\n  } = useContextSystem(props, 'BorderBoxControl');\n  maybeWarnDeprecated36pxSize({\n    componentName: 'BorderBoxControl',\n    __next40pxDefaultSize,\n    size\n  });\n  const computedSize = size === 'default' && __next40pxDefaultSize ? '__unstable-large' : size;\n  const mixedBorders = hasMixedBorders(value);\n  const splitBorders = hasSplitBorders(value);\n  const linkedValue = splitBorders ? getCommonBorder(value) : value;\n  const splitValue = splitBorders ? value : getSplitBorders(value);\n\n  // If no numeric width value is set, the unit select will be disabled.\n  const hasWidthValue = !isNaN(parseFloat(`${linkedValue?.width}`));\n  const [isLinked, setIsLinked] = useState(!mixedBorders);\n  const toggleLinked = () => setIsLinked(!isLinked);\n  const onLinkedChange = newBorder => {\n    if (!newBorder) {\n      return onChange(undefined);\n    }\n\n    // If we have all props defined on the new border apply it.\n    if (!mixedBorders || isCompleteBorder(newBorder)) {\n      return onChange(isEmptyBorder(newBorder) ? undefined : newBorder);\n    }\n\n    // If we had mixed borders we might have had some shared border props\n    // that we need to maintain. For example; we could have mixed borders\n    // with all the same color but different widths. Then from the linked\n    // control we change the color. We should keep the separate  widths.\n    const changes = getBorderDiff(linkedValue, newBorder);\n    const updatedBorders = {\n      top: {\n        ...value?.top,\n        ...changes\n      },\n      right: {\n        ...value?.right,\n        ...changes\n      },\n      bottom: {\n        ...value?.bottom,\n        ...changes\n      },\n      left: {\n        ...value?.left,\n        ...changes\n      }\n    };\n    if (hasMixedBorders(updatedBorders)) {\n      return onChange(updatedBorders);\n    }\n    const filteredResult = isEmptyBorder(updatedBorders.top) ? undefined : updatedBorders.top;\n    onChange(filteredResult);\n  };\n  const onSplitChange = (newBorder, side) => {\n    const updatedBorders = {\n      ...splitValue,\n      [side]: newBorder\n    };\n    if (hasMixedBorders(updatedBorders)) {\n      onChange(updatedBorders);\n    } else {\n      onChange(newBorder);\n    }\n  };\n  const cx = useCx();\n  const classes = useMemo(() => {\n    return cx(styles.borderBoxControl, className);\n  }, [cx, className]);\n  const linkedControlClassName = useMemo(() => {\n    return cx(styles.linkedBorderControl());\n  }, [cx]);\n  const wrapperClassName = useMemo(() => {\n    return cx(styles.wrapper);\n  }, [cx]);\n  return {\n    ...otherProps,\n    className: classes,\n    colors,\n    disableUnits: mixedBorders && !hasWidthValue,\n    enableAlpha,\n    enableStyle,\n    hasMixedBorders: mixedBorders,\n    isLinked,\n    linkedControlClassName,\n    onLinkedChange,\n    onSplitChange,\n    toggleLinked,\n    linkedValue,\n    size: computedSize,\n    splitValue,\n    wrapperClassName,\n    __experimentalIsRenderedInSidebar\n  };\n}"],
  "mappings": "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",
  "names": []
}
