import { useMemo, useState } from "@wordpress/element";
import { contextConnect, useContextSystem } from "../../context";
import { useCx } from "../../utils/hooks";
import BaseControl from "../../base-control";
import { VisualLabelWrapper } from "./styles";
import * as styles from "./styles";
import { ToggleGroupControlAsRadioGroup } from "./as-radio-group";
import { ToggleGroupControlAsButtonGroup } from "./as-button-group";
import { useTrackElementOffsetRect } from "../../utils/element-rect";
import { useMergeRefs } from "@wordpress/compose";
import { useAnimatedOffsetRect } from "../../utils/hooks/use-animated-offset-rect";
import { maybeWarnDeprecated36pxSize } from "../../utils/deprecated-36px-size";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
function UnconnectedToggleGroupControl(props, forwardedRef) {
  const {
    __nextHasNoMarginBottom = false,
    __next40pxDefaultSize = false,
    __shouldNotWarnDeprecated36pxSize,
    className,
    isAdaptiveWidth = false,
    isBlock = false,
    isDeselectable = false,
    label,
    hideLabelFromVision = false,
    help,
    onChange,
    size = "default",
    value,
    children,
    ...otherProps
  } = useContextSystem(props, "ToggleGroupControl");
  const normalizedSize = __next40pxDefaultSize && size === "default" ? "__unstable-large" : size;
  const [selectedElement, setSelectedElement] = useState();
  const [controlElement, setControlElement] = useState();
  const refs = useMergeRefs([setControlElement, forwardedRef]);
  const selectedRect = useTrackElementOffsetRect(value !== null && value !== void 0 ? selectedElement : void 0);
  useAnimatedOffsetRect(controlElement, selectedRect, {
    prefix: "selected",
    dataAttribute: "indicator-animated",
    transitionEndFilter: (event) => event.pseudoElement === "::before",
    roundRect: true
  });
  const cx = useCx();
  const classes = useMemo(() => cx(styles.toggleGroupControl({
    isBlock,
    isDeselectable,
    size: normalizedSize
  }), isBlock && styles.block, className), [className, cx, isBlock, isDeselectable, normalizedSize]);
  const MainControl = isDeselectable ? ToggleGroupControlAsButtonGroup : ToggleGroupControlAsRadioGroup;
  maybeWarnDeprecated36pxSize({
    componentName: "ToggleGroupControl",
    size,
    __next40pxDefaultSize,
    __shouldNotWarnDeprecated36pxSize
  });
  return /* @__PURE__ */ _jsxs(BaseControl, {
    help,
    __nextHasNoMarginBottom,
    __associatedWPComponentName: "ToggleGroupControl",
    children: [!hideLabelFromVision && /* @__PURE__ */ _jsx(VisualLabelWrapper, {
      children: /* @__PURE__ */ _jsx(BaseControl.VisualLabel, {
        children: label
      })
    }), /* @__PURE__ */ _jsx(MainControl, {
      ...otherProps,
      setSelectedElement,
      className: classes,
      isAdaptiveWidth,
      label,
      onChange,
      ref: refs,
      size: normalizedSize,
      value,
      children
    })]
  });
}
const ToggleGroupControl = contextConnect(UnconnectedToggleGroupControl, "ToggleGroupControl");
var component_default = ToggleGroupControl;
export {
  ToggleGroupControl,
  component_default as default
};
//# sourceMappingURL=component.js.map
