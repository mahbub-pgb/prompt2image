{
  "version": 3,
  "sources": ["../../../src/component/event-listeners/input-and-selection.js"],
  "sourcesContent": ["/**\n * Internal dependencies\n */\nimport { getActiveFormats } from '../../get-active-formats';\nimport { updateFormats } from '../../update-formats';\n\n/**\n * All inserting input types that would insert HTML into the DOM.\n *\n * @see https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes\n *\n * @type {Set}\n */\nconst INSERTION_INPUT_TYPES_TO_IGNORE = new Set( [\n\t'insertParagraph',\n\t'insertOrderedList',\n\t'insertUnorderedList',\n\t'insertHorizontalRule',\n\t'insertLink',\n] );\n\nconst EMPTY_ACTIVE_FORMATS = [];\n\nconst PLACEHOLDER_ATTR_NAME = 'data-rich-text-placeholder';\n\n/**\n * If the selection is set on the placeholder element, collapse the selection to\n * the start (before the placeholder).\n *\n * @param {Window} defaultView\n */\nfunction fixPlaceholderSelection( defaultView ) {\n\tconst selection = defaultView.getSelection();\n\tconst { anchorNode, anchorOffset } = selection;\n\n\tif ( anchorNode.nodeType !== anchorNode.ELEMENT_NODE ) {\n\t\treturn;\n\t}\n\n\tconst targetNode = anchorNode.childNodes[ anchorOffset ];\n\n\tif (\n\t\t! targetNode ||\n\t\ttargetNode.nodeType !== targetNode.ELEMENT_NODE ||\n\t\t! targetNode.hasAttribute( PLACEHOLDER_ATTR_NAME )\n\t) {\n\t\treturn;\n\t}\n\n\tselection.collapseToStart();\n}\n\nexport default ( props ) => ( element ) => {\n\tconst { ownerDocument } = element;\n\tconst { defaultView } = ownerDocument;\n\n\tlet isComposing = false;\n\n\tfunction onInput( event ) {\n\t\t// Do not trigger a change if characters are being composed. Browsers\n\t\t// will usually emit a final `input` event when the characters are\n\t\t// composed. As of December 2019, Safari doesn't support\n\t\t// nativeEvent.isComposing.\n\t\tif ( isComposing ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet inputType;\n\n\t\tif ( event ) {\n\t\t\tinputType = event.inputType;\n\t\t}\n\n\t\tconst { record, applyRecord, createRecord, handleChange } =\n\t\t\tprops.current;\n\n\t\t// The browser formatted something or tried to insert HTML. Overwrite\n\t\t// it. It will be handled later by the format library if needed.\n\t\tif (\n\t\t\tinputType &&\n\t\t\t( inputType.indexOf( 'format' ) === 0 ||\n\t\t\t\tINSERTION_INPUT_TYPES_TO_IGNORE.has( inputType ) )\n\t\t) {\n\t\t\tapplyRecord( record.current );\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentValue = createRecord();\n\t\tconst { start, activeFormats: oldActiveFormats = [] } = record.current;\n\n\t\t// Update the formats between the last and new caret position.\n\t\tconst change = updateFormats( {\n\t\t\tvalue: currentValue,\n\t\t\tstart,\n\t\t\tend: currentValue.start,\n\t\t\tformats: oldActiveFormats,\n\t\t} );\n\n\t\thandleChange( change );\n\t}\n\n\t/**\n\t * Syncs the selection to local state. A callback for the `selectionchange`\n\t * event.\n\t */\n\tfunction handleSelectionChange() {\n\t\tconst { record, applyRecord, createRecord, onSelectionChange } =\n\t\t\tprops.current;\n\n\t\t// Check if the implementor disabled editing. `contentEditable` does\n\t\t// disable input, but not text selection, so we must ignore selection\n\t\t// changes.\n\t\tif ( element.contentEditable !== 'true' ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure the active element is the rich text element.\n\t\tif ( ownerDocument.activeElement !== element ) {\n\t\t\t// If it is not, we can stop listening for selection changes. We\n\t\t\t// resume listening when the element is focused.\n\t\t\townerDocument.removeEventListener(\n\t\t\t\t'selectionchange',\n\t\t\t\thandleSelectionChange\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// In case of a keyboard event, ignore selection changes during\n\t\t// composition.\n\t\tif ( isComposing ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { start, end, text } = createRecord();\n\t\tconst oldRecord = record.current;\n\n\t\t// Fallback mechanism for IE11, which doesn't support the input event.\n\t\t// Any input results in a selection change.\n\t\tif ( text !== oldRecord.text ) {\n\t\t\tonInput();\n\t\t\treturn;\n\t\t}\n\n\t\tif ( start === oldRecord.start && end === oldRecord.end ) {\n\t\t\t// Sometimes the browser may set the selection on the placeholder\n\t\t\t// element, in which case the caret is not visible. We need to set\n\t\t\t// the caret before the placeholder if that's the case.\n\t\t\tif ( oldRecord.text.length === 0 && start === 0 ) {\n\t\t\t\tfixPlaceholderSelection( defaultView );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValue = {\n\t\t\t...oldRecord,\n\t\t\tstart,\n\t\t\tend,\n\t\t\t// _newActiveFormats may be set on arrow key navigation to control\n\t\t\t// the right boundary position. If undefined, getActiveFormats will\n\t\t\t// give the active formats according to the browser.\n\t\t\tactiveFormats: oldRecord._newActiveFormats,\n\t\t\t_newActiveFormats: undefined,\n\t\t};\n\n\t\tconst newActiveFormats = getActiveFormats(\n\t\t\tnewValue,\n\t\t\tEMPTY_ACTIVE_FORMATS\n\t\t);\n\n\t\t// Update the value with the new active formats.\n\t\tnewValue.activeFormats = newActiveFormats;\n\n\t\t// It is important that the internal value is updated first,\n\t\t// otherwise the value will be wrong on render!\n\t\trecord.current = newValue;\n\t\tapplyRecord( newValue, { domOnly: true } );\n\t\tonSelectionChange( start, end );\n\t}\n\n\tfunction onCompositionStart() {\n\t\tisComposing = true;\n\t\t// Do not update the selection when characters are being composed as\n\t\t// this rerenders the component and might destroy internal browser\n\t\t// editing state.\n\t\townerDocument.removeEventListener(\n\t\t\t'selectionchange',\n\t\t\thandleSelectionChange\n\t\t);\n\t\t// Remove the placeholder. Since the rich text value doesn't update\n\t\t// during composition, the placeholder doesn't get removed. There's no\n\t\t// need to re-add it, when the value is updated on compositionend it\n\t\t// will be re-added when the value is empty.\n\t\telement.querySelector( `[${ PLACEHOLDER_ATTR_NAME }]` )?.remove();\n\t}\n\n\tfunction onCompositionEnd() {\n\t\tisComposing = false;\n\t\t// Ensure the value is up-to-date for browsers that don't emit a final\n\t\t// input event after composition.\n\t\tonInput( { inputType: 'insertText' } );\n\t\t// Tracking selection changes can be resumed.\n\t\townerDocument.addEventListener(\n\t\t\t'selectionchange',\n\t\t\thandleSelectionChange\n\t\t);\n\t}\n\n\tfunction onFocus() {\n\t\tconst { record, isSelected, onSelectionChange, applyRecord } =\n\t\t\tprops.current;\n\n\t\t// When the whole editor is editable, let writing flow handle\n\t\t// selection.\n\t\tif ( element.parentElement.closest( '[contenteditable=\"true\"]' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! isSelected ) {\n\t\t\t// We know for certain that on focus, the old selection is invalid.\n\t\t\t// It will be recalculated on the next mouseup, keyup, or touchend\n\t\t\t// event.\n\t\t\tconst index = undefined;\n\n\t\t\trecord.current = {\n\t\t\t\t...record.current,\n\t\t\t\tstart: index,\n\t\t\t\tend: index,\n\t\t\t\tactiveFormats: EMPTY_ACTIVE_FORMATS,\n\t\t\t};\n\t\t} else {\n\t\t\tapplyRecord( record.current, { domOnly: true } );\n\t\t}\n\n\t\tonSelectionChange( record.current.start, record.current.end );\n\n\t\t// There is no selection change event when the element is focused, so\n\t\t// we need to manually trigger it. The selection is also not available\n\t\t// yet in this call stack.\n\t\twindow.queueMicrotask( handleSelectionChange );\n\n\t\townerDocument.addEventListener(\n\t\t\t'selectionchange',\n\t\t\thandleSelectionChange\n\t\t);\n\t}\n\n\telement.addEventListener( 'input', onInput );\n\telement.addEventListener( 'compositionstart', onCompositionStart );\n\telement.addEventListener( 'compositionend', onCompositionEnd );\n\telement.addEventListener( 'focus', onFocus );\n\n\treturn () => {\n\t\telement.removeEventListener( 'input', onInput );\n\t\telement.removeEventListener( 'compositionstart', onCompositionStart );\n\t\telement.removeEventListener( 'compositionend', onCompositionEnd );\n\t\telement.removeEventListener( 'focus', onFocus );\n\t};\n};\n"],
  "mappings": "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",
  "names": []
}
