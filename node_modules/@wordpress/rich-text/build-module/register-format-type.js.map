{
  "version": 3,
  "sources": ["../src/register-format-type.js"],
  "sourcesContent": ["/**\n * WordPress dependencies\n */\nimport { select, dispatch } from '@wordpress/data';\n/**\n * Internal dependencies\n */\nimport { store as richTextStore } from './store';\n/**\n * @typedef {Object} WPFormat\n *\n * @property {string}        name        A string identifying the format. Must be\n *                                       unique across all registered formats.\n * @property {string}        tagName     The HTML tag this format will wrap the\n *                                       selection with.\n * @property {boolean}       interactive Whether format makes content interactive or not.\n * @property {boolean}       object      Whether the format represents an object (e.g., `img`, `br`),\n *                                       an object cannot contain other format types.\n * @property {string | null} [className] A class to match the format.\n * @property {string}        title       Name of the format.\n * @property {Function}      edit        Should return a component for the user to\n *                                       interact with the new registered format.\n */\n\n/**\n * Registers a new format provided a unique name and an object defining its\n * behavior.\n *\n * @param {string}   name     Format name.\n * @param {WPFormat} settings Format settings.\n *\n * @return {WPFormat|undefined} The format, if it has been successfully\n *                              registered; otherwise `undefined`.\n */\nexport function registerFormatType( name, settings ) {\n\tsettings = {\n\t\tname,\n\t\t...settings,\n\t};\n\n\tif ( typeof settings.name !== 'string' ) {\n\t\twindow.console.error( 'Format names must be strings.' );\n\t\treturn;\n\t}\n\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( settings.name ) ) {\n\t\twindow.console.error(\n\t\t\t'Format names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-format'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( select( richTextStore ).getFormatType( settings.name ) ) {\n\t\twindow.console.error(\n\t\t\t'Format \"' + settings.name + '\" is already registered.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( typeof settings.tagName !== 'string' || settings.tagName === '' ) {\n\t\twindow.console.error( 'Format tag names must be a string.' );\n\t\treturn;\n\t}\n\n\tif (\n\t\t( typeof settings.className !== 'string' ||\n\t\t\tsettings.className === '' ) &&\n\t\tsettings.className !== null\n\t) {\n\t\twindow.console.error(\n\t\t\t'Format class names must be a string, or null to handle bare elements.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( ! /^[_a-zA-Z]+[a-zA-Z0-9_-]*$/.test( settings.className ) ) {\n\t\twindow.console.error(\n\t\t\t'A class name must begin with a letter, followed by any number of hyphens, underscores, letters, or numbers.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( settings.className === null ) {\n\t\tconst formatTypeForBareElement = select(\n\t\t\trichTextStore\n\t\t).getFormatTypeForBareElement( settings.tagName );\n\n\t\tif (\n\t\t\tformatTypeForBareElement &&\n\t\t\tformatTypeForBareElement.name !== 'core/unknown'\n\t\t) {\n\t\t\twindow.console.error(\n\t\t\t\t`Format \"${ formatTypeForBareElement.name }\" is already registered to handle bare tag name \"${ settings.tagName }\".`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\tconst formatTypeForClassName = select(\n\t\t\trichTextStore\n\t\t).getFormatTypeForClassName( settings.className );\n\n\t\tif ( formatTypeForClassName ) {\n\t\t\twindow.console.error(\n\t\t\t\t`Format \"${ formatTypeForClassName.name }\" is already registered to handle class name \"${ settings.className }\".`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\twindow.console.error(\n\t\t\t'The format \"' + settings.name + '\" must have a title.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( 'keywords' in settings && settings.keywords.length > 3 ) {\n\t\twindow.console.error(\n\t\t\t'The format \"' +\n\t\t\t\tsettings.name +\n\t\t\t\t'\" can have a maximum of 3 keywords.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( typeof settings.title !== 'string' ) {\n\t\twindow.console.error( 'Format titles must be strings.' );\n\t\treturn;\n\t}\n\n\tdispatch( richTextStore ).addFormatTypes( settings );\n\n\treturn settings;\n}\n"],
  "mappings": "AAGA,SAAS,QAAQ,gBAAgB;AAIjC,SAAS,SAAS,qBAAqB;AA2BhC,SAAS,mBAAoB,MAAM,UAAW;AACpD,aAAW;AAAA,IACV;AAAA,IACA,GAAG;AAAA,EACJ;AAEA,MAAK,OAAO,SAAS,SAAS,UAAW;AACxC,WAAO,QAAQ,MAAO,+BAAgC;AACtD;AAAA,EACD;AAEA,MAAK,CAAE,qCAAqC,KAAM,SAAS,IAAK,GAAI;AACnE,WAAO,QAAQ;AAAA,MACd;AAAA,IACD;AACA;AAAA,EACD;AAEA,MAAK,OAAQ,aAAc,EAAE,cAAe,SAAS,IAAK,GAAI;AAC7D,WAAO,QAAQ;AAAA,MACd,aAAa,SAAS,OAAO;AAAA,IAC9B;AACA;AAAA,EACD;AAEA,MAAK,OAAO,SAAS,YAAY,YAAY,SAAS,YAAY,IAAK;AACtE,WAAO,QAAQ,MAAO,oCAAqC;AAC3D;AAAA,EACD;AAEA,OACG,OAAO,SAAS,cAAc,YAC/B,SAAS,cAAc,OACxB,SAAS,cAAc,MACtB;AACD,WAAO,QAAQ;AAAA,MACd;AAAA,IACD;AACA;AAAA,EACD;AAEA,MAAK,CAAE,6BAA6B,KAAM,SAAS,SAAU,GAAI;AAChE,WAAO,QAAQ;AAAA,MACd;AAAA,IACD;AACA;AAAA,EACD;AAEA,MAAK,SAAS,cAAc,MAAO;AAClC,UAAM,2BAA2B;AAAA,MAChC;AAAA,IACD,EAAE,4BAA6B,SAAS,OAAQ;AAEhD,QACC,4BACA,yBAAyB,SAAS,gBACjC;AACD,aAAO,QAAQ;AAAA,QACd,WAAY,yBAAyB,IAAK,oDAAqD,SAAS,OAAQ;AAAA,MACjH;AACA;AAAA,IACD;AAAA,EACD,OAAO;AACN,UAAM,yBAAyB;AAAA,MAC9B;AAAA,IACD,EAAE,0BAA2B,SAAS,SAAU;AAEhD,QAAK,wBAAyB;AAC7B,aAAO,QAAQ;AAAA,QACd,WAAY,uBAAuB,IAAK,iDAAkD,SAAS,SAAU;AAAA,MAC9G;AACA;AAAA,IACD;AAAA,EACD;AAEA,MAAK,EAAI,WAAW,aAAc,SAAS,UAAU,IAAK;AACzD,WAAO,QAAQ;AAAA,MACd,iBAAiB,SAAS,OAAO;AAAA,IAClC;AACA;AAAA,EACD;AAEA,MAAK,cAAc,YAAY,SAAS,SAAS,SAAS,GAAI;AAC7D,WAAO,QAAQ;AAAA,MACd,iBACC,SAAS,OACT;AAAA,IACF;AACA;AAAA,EACD;AAEA,MAAK,OAAO,SAAS,UAAU,UAAW;AACzC,WAAO,QAAQ,MAAO,gCAAiC;AACvD;AAAA,EACD;AAEA,WAAU,aAAc,EAAE,eAAgB,QAAS;AAEnD,SAAO;AACR;",
  "names": []
}
