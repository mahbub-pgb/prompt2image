"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var use_boundary_style_exports = {};
__export(use_boundary_style_exports, {
  useBoundaryStyle: () => useBoundaryStyle
});
module.exports = __toCommonJS(use_boundary_style_exports);
var import_colord = require("colord");
var import_element = require("@wordpress/element");
function useBoundaryStyle({ record }) {
  const ref = (0, import_element.useRef)();
  const { activeFormats = [], replacements, start } = record.current;
  const activeReplacement = replacements[start];
  (0, import_element.useEffect)(() => {
    if ((!activeFormats || !activeFormats.length) && !activeReplacement) {
      return;
    }
    const boundarySelector = "*[data-rich-text-format-boundary]";
    const element = ref.current.querySelector(boundarySelector);
    if (!element) {
      return;
    }
    const { ownerDocument } = element;
    const { defaultView } = ownerDocument;
    const computedStyle = defaultView.getComputedStyle(element);
    const newColor = (0, import_colord.colord)(computedStyle.color).alpha(0.2).toRgbString();
    const selector = `.rich-text:focus ${boundarySelector}`;
    const rule = `background-color: ${newColor}`;
    const style = `${selector} {${rule}}`;
    const globalStyleId = "rich-text-boundary-style";
    let globalStyle = ownerDocument.getElementById(globalStyleId);
    if (!globalStyle) {
      globalStyle = ownerDocument.createElement("style");
      globalStyle.id = globalStyleId;
      ownerDocument.head.appendChild(globalStyle);
    }
    if (globalStyle.innerHTML !== style) {
      globalStyle.innerHTML = style;
    }
  }, [activeFormats, activeReplacement]);
  return ref;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useBoundaryStyle
});
//# sourceMappingURL=use-boundary-style.js.map
