import hiddenCaretRangeFromPoint from "./hidden-caret-range-from-point";
import { assertIsDefined } from "../utils/assert-is-defined";
import isInputOrTextArea from "./is-input-or-text-area";
import isRTL from "./is-rtl";
import { scrollIfNoRange } from "./scroll-if-no-range";
function getRange(container, isReverse, x) {
  const { ownerDocument } = container;
  const isReverseDir = isRTL(container) ? !isReverse : isReverse;
  const containerRect = container.getBoundingClientRect();
  if (x === void 0) {
    x = isReverse ? containerRect.right - 1 : containerRect.left + 1;
  } else if (x <= containerRect.left) {
    x = containerRect.left + 1;
  } else if (x >= containerRect.right) {
    x = containerRect.right - 1;
  }
  const y = isReverseDir ? containerRect.bottom - 1 : containerRect.top + 1;
  return hiddenCaretRangeFromPoint(ownerDocument, x, y, container);
}
function placeCaretAtEdge(container, isReverse, x) {
  if (!container) {
    return;
  }
  container.focus();
  if (isInputOrTextArea(container)) {
    if (typeof container.selectionStart !== "number") {
      return;
    }
    if (isReverse) {
      container.selectionStart = container.value.length;
      container.selectionEnd = container.value.length;
    } else {
      container.selectionStart = 0;
      container.selectionEnd = 0;
    }
    return;
  }
  if (!container.isContentEditable) {
    return;
  }
  const range = scrollIfNoRange(
    container,
    isReverse,
    () => getRange(container, isReverse, x)
  );
  if (!range) {
    return;
  }
  const { ownerDocument } = container;
  const { defaultView } = ownerDocument;
  assertIsDefined(defaultView, "defaultView");
  const selection = defaultView.getSelection();
  assertIsDefined(selection, "selection");
  selection.removeAllRanges();
  selection.addRange(range);
}
export {
  placeCaretAtEdge as default
};
//# sourceMappingURL=place-caret-at-edge.js.map
