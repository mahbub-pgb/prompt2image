"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var with_global_events_exports = {};
__export(with_global_events_exports, {
  default: () => withGlobalEvents
});
module.exports = __toCommonJS(with_global_events_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_element = require("@wordpress/element");
var import_deprecated = __toESM(require("@wordpress/deprecated"));
var import_create_higher_order_component = require("../../utils/create-higher-order-component");
var import_listener = __toESM(require("./listener"));
const listener = new import_listener.default();
function withGlobalEvents(eventTypesToHandlers) {
  (0, import_deprecated.default)("wp.compose.withGlobalEvents", {
    since: "5.7",
    alternative: "useEffect"
  });
  return (0, import_create_higher_order_component.createHigherOrderComponent)((WrappedComponent) => {
    class Wrapper extends import_element.Component {
      constructor(props) {
        super(props);
        this.handleEvent = this.handleEvent.bind(this);
        this.handleRef = this.handleRef.bind(this);
      }
      componentDidMount() {
        Object.keys(eventTypesToHandlers).forEach((eventType) => {
          listener.add(eventType, this);
        });
      }
      componentWillUnmount() {
        Object.keys(eventTypesToHandlers).forEach((eventType) => {
          listener.remove(eventType, this);
        });
      }
      handleEvent(event) {
        const handler = eventTypesToHandlers[
          /** @type {keyof GlobalEventHandlersEventMap} */
          event.type
          /* eslint-enable jsdoc/no-undefined-types */
        ];
        if (typeof this.wrappedRef[handler] === "function") {
          this.wrappedRef[handler](event);
        }
      }
      handleRef(el) {
        this.wrappedRef = el;
        if (this.props.forwardedRef) {
          this.props.forwardedRef(el);
        }
      }
      render() {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          WrappedComponent,
          {
            ...this.props.ownProps,
            ref: this.handleRef
          }
        );
      }
    }
    return (0, import_element.forwardRef)((props, ref) => {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Wrapper, { ownProps: props, forwardedRef: ref });
    });
  }, "withGlobalEvents");
}
//# sourceMappingURL=index.js.map
