{
  "version": 3,
  "sources": ["../../src/request-utils/rest.ts"],
  "sourcesContent": ["/**\n * External dependencies\n */\nimport * as fs from 'fs/promises';\nimport { dirname } from 'path';\nimport { expect } from '@playwright/test';\nimport type { APIRequestContext } from '@playwright/test';\n\n/**\n * Internal dependencies\n */\nimport { WP_BASE_URL } from '../config';\nimport type { RequestUtils, StorageState } from './index';\n\nfunction splitRequestsToChunks( requests: BatchRequest[], chunkSize: number ) {\n\tconst arr = [ ...requests ];\n\tconst cache = [];\n\twhile ( arr.length ) {\n\t\tcache.push( arr.splice( 0, chunkSize ) );\n\t}\n\n\treturn cache;\n}\n\nasync function getAPIRootURL( request: APIRequestContext ) {\n\t// Discover the API root url using link header.\n\t// See https://developer.wordpress.org/rest-api/using-the-rest-api/discovery/#link-header\n\tconst response = await request.head( WP_BASE_URL );\n\tconst links = response.headers().link;\n\tconst restLink = links?.match( /<([^>]+)>; rel=\"https:\\/\\/api\\.w\\.org\\/\"/ );\n\n\tif ( ! restLink ) {\n\t\tthrow new Error( `Failed to discover REST API endpoint.\n Link header: ${ links }` );\n\t}\n\n\tconst [ , rootURL ] = restLink;\n\n\treturn rootURL;\n}\n\nasync function setupRest( this: RequestUtils ): Promise< StorageState > {\n\tlet nonce = '';\n\tlet rootURL = '';\n\n\t// Poll until the REST API is discovered.\n\t// See https://github.com/WordPress/gutenberg/issues/61627\n\tawait expect\n\t\t.poll(\n\t\t\tasync () => {\n\t\t\t\ttry {\n\t\t\t\t\t[ nonce, rootURL ] = await Promise.all( [\n\t\t\t\t\t\tthis.login(),\n\t\t\t\t\t\tgetAPIRootURL( this.request ),\n\t\t\t\t\t] );\n\t\t\t\t} catch ( error ) {\n\t\t\t\t\t// Prints the error if the timeout is reached.\n\t\t\t\t\treturn error;\n\t\t\t\t}\n\n\t\t\t\treturn !! ( nonce && rootURL );\n\t\t\t},\n\t\t\t{\n\t\t\t\tmessage: 'Failed to setup REST API.',\n\t\t\t\ttimeout: 60_000, // 1 minute.\n\t\t\t}\n\t\t)\n\t\t.toBe( true );\n\n\tconst { cookies } = await this.request.storageState();\n\n\tconst storageState: StorageState = {\n\t\tcookies,\n\t\tnonce,\n\t\trootURL,\n\t};\n\n\tif ( this.storageStatePath ) {\n\t\tawait fs.mkdir( dirname( this.storageStatePath ), { recursive: true } );\n\t\tawait fs.writeFile(\n\t\t\tthis.storageStatePath,\n\t\t\tJSON.stringify( storageState ),\n\t\t\t'utf-8'\n\t\t);\n\t}\n\n\tthis.storageState = storageState;\n\n\treturn storageState;\n}\n\ntype RequestFetchOptions = Exclude<\n\tParameters< APIRequestContext[ 'fetch' ] >[ 1 ],\n\tundefined\n>;\nexport interface RestOptions extends RequestFetchOptions {\n\tpath: string;\n}\n\nasync function rest< RestResponse = any >(\n\tthis: RequestUtils,\n\toptions: RestOptions\n): Promise< RestResponse > {\n\tconst { path, ...fetchOptions } = options;\n\n\tif ( ! path ) {\n\t\tthrow new Error( '\"path\" is required to make a REST call' );\n\t}\n\n\tif ( ! this.storageState?.nonce || ! this.storageState?.rootURL ) {\n\t\tawait this.setupRest();\n\t}\n\n\tconst relativePath = path.startsWith( '/' ) ? path.slice( 1 ) : path;\n\n\tconst url = this.storageState!.rootURL + relativePath;\n\n\ttry {\n\t\tconst response = await this.request.fetch( url, {\n\t\t\t...fetchOptions,\n\t\t\tfailOnStatusCode: false,\n\t\t\theaders: {\n\t\t\t\t'X-WP-Nonce': this.storageState!.nonce,\n\t\t\t\t...( fetchOptions.headers || {} ),\n\t\t\t},\n\t\t} );\n\t\tconst json: RestResponse = await response.json();\n\n\t\tif ( ! response.ok() ) {\n\t\t\tthrow json;\n\t\t}\n\n\t\treturn json;\n\t} catch ( error ) {\n\t\t// Nonce in invalid, retry again with a renewed nonce.\n\t\tif (\n\t\t\ttypeof error === 'object' &&\n\t\t\terror !== null &&\n\t\t\tObject.prototype.hasOwnProperty.call( error, 'code' ) &&\n\t\t\t( error as { code: string } ).code === 'rest_cookie_invalid_nonce'\n\t\t) {\n\t\t\tawait this.setupRest();\n\n\t\t\treturn this.rest( options );\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\n/**\n * Get the maximum batch size for the REST API.\n *\n * @param this\n * @param forceRefetch Force revalidate the cached max batch size.\n */\nasync function getMaxBatchSize( this: RequestUtils, forceRefetch = false ) {\n\tif ( ! forceRefetch && this.maxBatchSize ) {\n\t\treturn this.maxBatchSize;\n\t}\n\n\tconst response = await this.rest< {\n\t\tendpoints: {\n\t\t\targs: {\n\t\t\t\trequests: {\n\t\t\t\t\tmaxItems: number;\n\t\t\t\t};\n\t\t\t};\n\t\t}[];\n\t} >( {\n\t\tmethod: 'OPTIONS',\n\t\tpath: '/batch/v1',\n\t} );\n\tthis.maxBatchSize = response.endpoints[ 0 ].args.requests.maxItems;\n\treturn this.maxBatchSize;\n}\n\nexport interface BatchRequest {\n\tmethod?: string;\n\tpath: string;\n\theaders?: Record< string, string | string[] >;\n\tbody?: any;\n}\n\nasync function batchRest< BatchResponse >(\n\tthis: RequestUtils,\n\trequests: BatchRequest[]\n): Promise< BatchResponse[] > {\n\tconst maxBatchSize = await this.getMaxBatchSize();\n\n\tif ( requests.length > maxBatchSize ) {\n\t\tconst chunks = splitRequestsToChunks( requests, maxBatchSize );\n\n\t\tconst chunkResponses = await Promise.all(\n\t\t\tchunks.map( ( chunkRequests ) =>\n\t\t\t\tthis.batchRest< BatchResponse >( chunkRequests )\n\t\t\t)\n\t\t);\n\n\t\treturn chunkResponses.flat();\n\t}\n\n\tconst batchResponses = await this.rest< {\n\t\tfailed?: string;\n\t\tresponses: BatchResponse[];\n\t} >( {\n\t\tmethod: 'POST',\n\t\tpath: '/batch/v1',\n\t\tdata: {\n\t\t\trequests,\n\t\t\tvalidation: 'require-all-validate',\n\t\t},\n\t} );\n\n\tif ( batchResponses.failed ) {\n\t\tthrow batchResponses;\n\t}\n\n\treturn batchResponses.responses;\n}\n\nexport { setupRest, rest, getMaxBatchSize, batchRest };\n"],
  "mappings": "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",
  "names": []
}
